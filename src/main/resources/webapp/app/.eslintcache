[{"F:\\ReactJS Project\\training-level-classification\\src\\index.jsx":"1","F:\\ReactJS Project\\training-level-classification\\src\\App.jsx":"2","F:\\ReactJS Project\\training-level-classification\\src\\reportWebVitals.jsx":"3","F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete.js":"4","F:\\ReactJS Project\\training-level-classification\\src\\components\\criteria.jsx":"5","F:\\ReactJS Project\\training-level-classification\\src\\components\\classification-table.jsx":"6","F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete-classification.jsx":"7","F:\\ReactJS Project\\training-level-classification\\src\\components\\rankings.jsx":"8","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\physical.jsx":"9","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\technical .jsx":"10","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\psychophysiology.jsx":"11","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\form.jsx":"12","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header.jsx":"13","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header-components.jsx":"14","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\footer\\footer.jsx":"15","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\index.jsx":"16","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\reportWebVitals.jsx":"17","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\App.jsx":"18","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\footer\\footer.jsx":"19","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\header\\header.jsx":"20","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\header\\header-components.jsx":"21","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical.jsx":"22","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical.jsx":"23","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology.jsx":"24","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form.jsx":"25","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-service.js":"26","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-service.js":"27","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-service.js":"28","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-service.js":"29","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete.jsx":"30","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-service.js":"31","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-update.jsx":"32","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-update.jsx":"33","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-detail.jsx":"34","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-update.jsx":"35","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-update.jsx":"36","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-update.jsx":"37","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athlete-classification.jsx":"38","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athleteClass.js":"39","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athlete-classification-service.js":"40","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\rankings\\rankings.jsx":"41","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utilities\\now-date-time.js":"42","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-detail.jsx":"43","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-detail.jsx":"44","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-detail.jsx":"45","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-detail.jsx":"46","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\psychophysiologyFactorChart.jsx":"47","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\formFactorChart.jsx":"48","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\technicalFactorChart.jsx":"49","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\physicalFactorChart.jsx":"50"},{"size":829,"mtime":1614403638825,"results":"51","hashOfConfig":"52"},{"size":1255,"mtime":1614195958540,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":1611600649490,"results":"54","hashOfConfig":"52"},{"size":4953,"mtime":1612575581759,"results":"55","hashOfConfig":"52"},{"size":14608,"mtime":1614199264111,"results":"56","hashOfConfig":"52"},{"size":983,"mtime":1614199279727,"results":"57","hashOfConfig":"52"},{"size":1231,"mtime":1614198254186,"results":"58","hashOfConfig":"52"},{"size":1231,"mtime":1614198305794,"results":"59","hashOfConfig":"52"},{"size":2505,"mtime":1614198355473,"results":"60","hashOfConfig":"52"},{"size":1278,"mtime":1614198369267,"results":"61","hashOfConfig":"52"},{"size":1602,"mtime":1614198361826,"results":"62","hashOfConfig":"52"},{"size":1206,"mtime":1614198342796,"results":"63","hashOfConfig":"52"},{"size":2064,"mtime":1614197177230,"results":"64","hashOfConfig":"52"},{"size":543,"mtime":1614225980410,"results":"65","hashOfConfig":"52"},{"size":539,"mtime":1614195737853,"results":"66","hashOfConfig":"52"},{"size":829,"mtime":1614403638825,"results":"67","hashOfConfig":"68"},{"size":362,"mtime":1611600649490,"results":"69","hashOfConfig":"68"},{"size":4520,"mtime":1618046855176,"results":"70","hashOfConfig":"68"},{"size":583,"mtime":1616264328198,"results":"71","hashOfConfig":"68"},{"size":3118,"mtime":1618046882442,"results":"72","hashOfConfig":"68"},{"size":559,"mtime":1617469472178,"results":"73","hashOfConfig":"68"},{"size":4936,"mtime":1618070129081,"results":"74","hashOfConfig":"68"},{"size":3581,"mtime":1617890972506,"results":"75","hashOfConfig":"68"},{"size":4229,"mtime":1617890588404,"results":"76","hashOfConfig":"68"},{"size":3444,"mtime":1617889728605,"results":"77","hashOfConfig":"68"},{"size":882,"mtime":1617866341399,"results":"78","hashOfConfig":"68"},{"size":982,"mtime":1617866416036,"results":"79","hashOfConfig":"68"},{"size":1182,"mtime":1617866480838,"results":"80","hashOfConfig":"68"},{"size":1009,"mtime":1617866527654,"results":"81","hashOfConfig":"68"},{"size":3696,"mtime":1617888966364,"results":"82","hashOfConfig":"68"},{"size":695,"mtime":1615386258716,"results":"83","hashOfConfig":"68"},{"size":5540,"mtime":1617471365869,"results":"84","hashOfConfig":"68"},{"size":4300,"mtime":1617878410665,"results":"85","hashOfConfig":"68"},{"size":2349,"mtime":1617205730820,"results":"86","hashOfConfig":"68"},{"size":4649,"mtime":1617879133028,"results":"87","hashOfConfig":"68"},{"size":12156,"mtime":1617878780342,"results":"88","hashOfConfig":"68"},{"size":6896,"mtime":1617878960548,"results":"89","hashOfConfig":"68"},{"size":6906,"mtime":1617937375923,"results":"90","hashOfConfig":"68"},{"size":3909,"mtime":1616240593820,"results":"91","hashOfConfig":"68"},{"size":1518,"mtime":1617960220863,"results":"92","hashOfConfig":"68"},{"size":4010,"mtime":1617965389756,"results":"93","hashOfConfig":"68"},{"size":167,"mtime":1616667207562,"results":"94","hashOfConfig":"68"},{"size":2382,"mtime":1617879961508,"results":"95","hashOfConfig":"68"},{"size":4721,"mtime":1617880218452,"results":"96","hashOfConfig":"68"},{"size":3364,"mtime":1617880258033,"results":"97","hashOfConfig":"68"},{"size":2617,"mtime":1617880286424,"results":"98","hashOfConfig":"68"},{"size":6040,"mtime":1618118107263,"results":"99","hashOfConfig":"68"},{"size":3580,"mtime":1618117306127,"results":"100","hashOfConfig":"68"},{"size":4201,"mtime":1617969470526,"results":"101","hashOfConfig":"68"},{"size":10814,"mtime":1618116270518,"results":"102","hashOfConfig":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},"1rkjdkk",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"106"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"106"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"106"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"147"},"10fh5uu",{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"147"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"147"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"147"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"147"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"147"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"147"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"147"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"147"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"147"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"147"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"147"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"147"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"147"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"147"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"147"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\ReactJS Project\\training-level-classification\\src\\index.jsx",["232","233","234","235"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Header from \"./components/layout/header/header\";\nimport Footer from \"./components/layout/footer/footer\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    {/* <Provider> */}\n      <App/>\n    {/* </Provider> */}\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["236","237"],"F:\\ReactJS Project\\training-level-classification\\src\\App.jsx",[],"F:\\ReactJS Project\\training-level-classification\\src\\reportWebVitals.jsx",[],"F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete.js",[],"F:\\ReactJS Project\\training-level-classification\\src\\components\\criteria.jsx",["238"],"import { render } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Col, Form, FormGroup, Input, Label, Row} from \"reactstrap\";\r\nimport Athlete from './athlete';\r\nimport ClassificationTable from \"./classification-table\";\r\nimport { connect } from 'react-redux';\r\n\r\nexport default function Criteria(props) {\r\n\r\n    const [isHide, setIsHide] = useState(false);\r\n    const [numericalOrder, setNumericalOrder] = useState(0);\r\n    // const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n\r\n    const [timeOfReflectionStart, setTimeOfReflectionStart] = useState('');\r\n    const [thirtyMetersRunAtHighSpeed, setThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [thirtyMetersRunWithLowStart, setThirtyMetersRunWithLowStart] = useState('');\r\n    const [sixtyMetersRunWithLowStart, setSixtyMetersRunWithLowStart] = useState('');\r\n    const [eightyMetersRunWithHighStart, setEightyMetersRunWithHighStart] = useState('');\r\n    const [oneHundredFiftyMetersRunWithHighStart, setOneHundredFiftyMetersRunWithHighStart] = useState('');\r\n    const [runTimeOfLastTwentyMetersInOneHundredMetersRun, setRunTimeOfLastTwentyMetersInOneHundredMetersRun] = useState('');\r\n    const [strengthCoefficient_K, setStrengthCoefficient_K] = useState('');\r\n    const [awayJumpInPlace, setAwayJumpInPlace] = useState('');\r\n    const [threeStepsJumpInPlace, setThreeStepsJumpInPlace] = useState('');\r\n    const [tenStepsJumpInPlace, setTenStepsJumpInPlace] = useState('');\r\n    const [performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed, setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [singleReflectionTime, setSingleReflectionTime] = useState('');\r\n    const [livingCapacityQuotient, setLivingCapacityQuotient] = useState('');\r\n    const [restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun, setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun] = useState('');\r\n    const [lacticAcidContentAfterOneHundredMetersRun, setLacticAcidContentAfterOneHundredMetersRun] = useState('');\r\n    const [thighsRaiseInPlaceForTenSeconds, setThighsRaiseInPlaceForTenSeconds] = useState('');\r\n    const [queteletQuotient, setQueteletQuotient] = useState('');\r\n\r\n    if (isHide) {\r\n      return null;\r\n    }\r\n\r\n    // const handleAthleteId = event => setAthleteId(event.target.value);\r\n    const handleAthleteName = event => setAthleteName(event.target.value);\r\n\r\n    const handleTimeOfReflectionStart = event => setTimeOfReflectionStart(event.target.value);\r\n    const handleThirtyMetersRunAtHighSpeed = event => setThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleThirtyMetersRunWithLowStart = event => setThirtyMetersRunWithLowStart(event.target.value);\r\n    const handleSixtyMetersRunWithLowStart = event => setSixtyMetersRunWithLowStart(event.target.value);\r\n    const handleEightyMetersRunWithHighStart = event => setEightyMetersRunWithHighStart(event.target.value);\r\n    const handleOneHundredFiftyMetersRunWithHighStart = event => setOneHundredFiftyMetersRunWithHighStart(event.target.value);\r\n    const handleRunTimeOfLastTwentyMetersInOneHundredMetersRun = event => setRunTimeOfLastTwentyMetersInOneHundredMetersRun(event.target.value);\r\n    const handleStrengthCoefficient_K = event => setStrengthCoefficient_K(event.target.value);\r\n    const handleAwayJumpInPlace = event => setAwayJumpInPlace(event.target.value);\r\n    const handleThreeStepsJumpInPlace = event => setThreeStepsJumpInPlace(event.target.value);\r\n    const handleTenStepsJumpInPlace = event => setTenStepsJumpInPlace(event.target.value);\r\n    const handlePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed = event => setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleSingleReflectionTime = event => setSingleReflectionTime(event.target.value);\r\n    const handleLivingCapacityQuotient = event => setLivingCapacityQuotient(event.target.value);\r\n    const handleRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun = event => setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(event.target.value);\r\n    const handleLacticAcidContentAfterOneHundredMetersRun = event => setLacticAcidContentAfterOneHundredMetersRun(event.target.value);\r\n    const handleThighsRaiseInPlaceForTenSeconds = event => setThighsRaiseInPlaceForTenSeconds(event.target.value);\r\n    const handleQueteletQuotient = event => setQueteletQuotient(event.target.value);\r\n\r\n    const handleReset = () => {\r\n      // setAthleteId(\"\");\r\n      setAthleteName(\"\");\r\n      setTimeOfReflectionStart(\"\");\r\n      setThirtyMetersRunAtHighSpeed(\"\");\r\n      setThirtyMetersRunWithLowStart(\"\");\r\n      setSixtyMetersRunWithLowStart(\"\");\r\n      setEightyMetersRunWithHighStart(\"\");\r\n      setOneHundredFiftyMetersRunWithHighStart(\"\");\r\n      setRunTimeOfLastTwentyMetersInOneHundredMetersRun(\"\");\r\n      setStrengthCoefficient_K(\"\");\r\n      setAwayJumpInPlace(\"\");\r\n      setThreeStepsJumpInPlace(\"\");\r\n      setTenStepsJumpInPlace(\"\");\r\n      setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(\"\");\r\n      setSingleReflectionTime(\"\");\r\n      setLivingCapacityQuotient(\"\");\r\n      setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(\"\");\r\n      setLacticAcidContentAfterOneHundredMetersRun(\"\");\r\n      setThighsRaiseInPlaceForTenSeconds(\"\");\r\n      setQueteletQuotient(\"\");\r\n    } \r\n\r\n    const {athletesCount} = props;\r\n    var newAthletesList =  [];\r\n    localStorage.removeItem(\"newAthletesList\");\r\n\r\n    const handleNext = () => {\r\n      var temp =  document.getElementsByName(\"criteria\");\r\n      var criterias = [];\r\n      for (var i = 0; i < temp.length; i++) {\r\n        criterias.push(temp[i].value);\r\n      }\r\n      newAthletesList[numericalOrder] = {name: athleteName, totalScoresOfCriterias: 0, grade: null, rank: null, criteriasList: criterias};\r\n      localStorage.setItem(`newAthletesList[${numericalOrder}]`, JSON.stringify(newAthletesList[numericalOrder]));\r\n      if (numericalOrder < athletesCount - 1) setNumericalOrder(numericalOrder + 1);\r\n      handleReset();\r\n    }\r\n\r\n    const handleClassify = () => {\r\n      handleNext();\r\n      for (let i = 0; i < athletesCount; i++) {\r\n        newAthletesList[i] = JSON.parse(localStorage.getItem(`newAthletesList[${i}]`));\r\n      }\r\n      localStorage.setItem(\"newAthletesList\", JSON.stringify(newAthletesList));\r\n      Athlete.classifyTrainingLevel();\r\n      let athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n      for (let i = 0; i < newAthletesList.length; i++) {\r\n        for (let j = 0; j < athletesList.length; j++) {\r\n          if (newAthletesList[i].name === athletesList[j].name) {\r\n            newAthletesList[i].totalScoresOfCriterias = athletesList[j].totalScoresOfCriterias;\r\n            newAthletesList[i].grade = athletesList[j].grade;\r\n            newAthletesList[i].rank = athletesList[j].rank;\r\n          }\r\n        }\r\n      }\r\n      setIsHide(true);\r\n      render(<ClassificationTable newAthletesList={newAthletesList}/>)\r\n    }\r\n\r\n    var button;\r\n    if (numericalOrder < athletesCount - 1) {\r\n      button = <Button id=\"btn-next\" size=\"sm\" onClick={handleNext} >Tiếp theo</Button>; \r\n    }\r\n    else button = <Button id=\"btn-classify\" size=\"sm\" onClick={handleClassify} >Phân loại</Button>;\r\n\r\n      return (\r\n        <div className=\"padding-title-title\">\r\n          <h2>Vận động viên thứ {numericalOrder + 1}</h2>\r\n          &nbsp;\r\n          <Form className=\"athlete-criteria\">\r\n            <FormGroup>\r\n              <Row className=\"athlete-info\">\r\n                <Col md=\"6\">\r\n                  <Label for=\"athlete-name\">Tên vận động viên</Label>\r\n                  <Input type=\"text\" id=\"athlete-name\" name=\"athlete-name\" value={athleteName} onChange={handleAthleteName} />\r\n                </Col>\r\n              </Row>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-time-of-reflection-start\">1. Thời gian phản xạ xuất phát (s)</Label>\r\n              <Input type=\"text\" id=\"time-of-reflection-start\" name=\"criteria\" value={timeOfReflectionStart} onChange={handleTimeOfReflectionStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thirty-meters-run-at-high-speed\">2. Chạy 30m tốc độ cao (s)</Label>\r\n              <Input type=\"text\" id=\"thirty-meters-run-at-high-speed\" name=\"criteria\" value={thirtyMetersRunAtHighSpeed} onChange={handleThirtyMetersRunAtHighSpeed} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thirty-meters-run-with-low-start\">3. Chạy 30m xuất phát thấp (s)</Label>\r\n              <Input type=\"text\" id=\"thirty-meters-run-with-low-start\" name=\"criteria\" value={thirtyMetersRunWithLowStart} onChange={handleThirtyMetersRunWithLowStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-sixty-meters-run-with-low-start\">4. Chạy 60m xuất phát thấp (s)</Label>\r\n              <Input type=\"text\" id=\"sixty-meters-run-with-low-start\" name=\"criteria\" value={sixtyMetersRunWithLowStart} onChange={handleSixtyMetersRunWithLowStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-eighty-meters-run-with-high-start\">5. Chạy 80m xuất phát cao (s)</Label>\r\n              <Input type=\"text\" id=\"eighty-meters-run-with-high-start\" name=\"criteria\" value={eightyMetersRunWithHighStart} onChange={handleEightyMetersRunWithHighStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-one-hundred-fifty-meters-run-with-high-start\">6. Chạy 150m xuất phát cao (s)</Label>\r\n              <Input type=\"text\" id=\"one-hundred-fifty-meters-run-with-high-start\" name=\"criteria\" value={oneHundredFiftyMetersRunWithHighStart} onChange={handleOneHundredFiftyMetersRunWithHighStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-away-jump-in-place\">7. Bật xa tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"away-jump-in-place\" name=\"criteria\" value={awayJumpInPlace} onChange={handleAwayJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"three-steps-jump-in-place\">8. Bật 3 bước tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"three-steps-jump-in-place\" name=\"criteria\" value={threeStepsJumpInPlace} onChange={handleThreeStepsJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-ten-steps-jump-in-place\">9. Bật 10 bước tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"ten-steps-jump-in-place\" name=\"criteria\" value={tenStepsJumpInPlace} onChange={handleTenStepsJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-run-time-of-last-twenty-meters-in-one-hundred-meters-run\">10. Thời gian của 20m cuối trong chạy 100m (s)</Label>\r\n              <Input type=\"text\" id=\"run-time-of-last-twenty-meters-in-one-hundred-meters-run\" name=\"criteria\" value={runTimeOfLastTwentyMetersInOneHundredMetersRun} onChange={handleRunTimeOfLastTwentyMetersInOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-strength-coefficient-K\">11. Hệ số sức bền K (s)</Label>\r\n              <Input type=\"text\" id=\"strength-coefficient-K\" name=\"criteria\" value={strengthCoefficient_K} onChange={handleStrengthCoefficient_K} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thighs-raise-in-place-for-ten-seconds\">12. Nâng cao đùi tại chỗ 10s (lần)</Label>\r\n              <Input type=\"text\" id=\"thighs-raise-in-place-for-ten-seconds\" name=\"criteria\" value={lacticAcidContentAfterOneHundredMetersRun} onChange={handleLacticAcidContentAfterOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-performance-difference-between-thirty-meters-run-with-low-start-and-thirty-meters-run-at-high-speed\">13. Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</Label>\r\n              <Input type=\"text\" id=\"performance-difference-between-thirty-meters-run-with-low-start-and-thirty-meters-run-at-high-speed\" name=\"criteria\" value={performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} onChange={handlePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-single-reflection-time\">14. Thời gian phản xạ đơn (s)</Label>\r\n              <Input type=\"text\" id=\"single-reflection-time\" name=\"criteria\" value={singleReflectionTime} onChange={handleSingleReflectionTime} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-living-capacity-quotient\">15. Chỉ số dung tích sống (ml/kg)</Label>\r\n              <Input type=\"text\" id=\"living-capacity-quotient\" name=\"criteria\" value={livingCapacityQuotient} onChange={handleLivingCapacityQuotient} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\">16. Tần số tim hồi phục 30s sau chạy 100m (lần/phút)</Label>\r\n              <Input type=\"text\" id=\"restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\" name=\"criteria\" value={restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} onChange={handleRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-lactic-acid-content-after-one-hundred-meters-run\">17. Hàm lượng axit lactic sau chạy 100m (mmol/lít)</Label>\r\n              <Input type=\"text\" id=\"lactic-acid-content-after-one-hundred-meters-run\" name=\"criteria\" value={thighsRaiseInPlaceForTenSeconds} onChange={handleThighsRaiseInPlaceForTenSeconds} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-quetelet-quotient\">18. Chỉ số Quetelet (g/cm)</Label>\r\n              <Input type=\"text\" id=\"quetelet-quotient\" name=\"criteria\" value={queteletQuotient} onChange={handleQueteletQuotient} />\r\n            </FormGroup>\r\n            {button}\r\n          </Form>\r\n      </div>\r\n      );\r\n\r\n}\r\n\r\n","F:\\ReactJS Project\\training-level-classification\\src\\components\\classification-table.jsx",[],["239","240"],"F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete-classification.jsx",["241"],"import React, { useState } from \"react\";\r\nimport { render } from \"@testing-library/react\";\r\nimport { Button, Container, Form, Input, Label } from \"reactstrap\";\r\n\r\nimport Criteria from './criteria';\r\n\r\nexport default function AthleteClassification(props) {\r\n\r\n    const [isHide, setIsHide] = useState(false);\r\n    const [athletesCount, setAthletesCount] = useState('');\r\n\r\n    if (isHide) {\r\n      return null;\r\n    }\r\n\r\n    const handleAthletesCount = event => setAthletesCount(event.target.value);\r\n\r\n    const handleNext = () => {\r\n        localStorage.setItem(\"athletesCount\", JSON.stringify(athletesCount));\r\n        setIsHide(true);\r\n        render(<Criteria athletesCount={athletesCount}/>);\r\n    }\r\n    \r\n    return (\r\n      <div className=\"padding-title\">\r\n        <h2>Phân loại trình độ tập luyện của các VĐV chạy 100m cấp cao</h2>\r\n        &nbsp;\r\n          <Form className=\"athlete-count\">\r\n            <Label>Số vận động viên</Label>\r\n            <Input type=\"text\" name=\"athletes-count\" value={athletesCount} onChange={handleAthletesCount} />\r\n            <Button id=\"btn-next\" color=\"info\" size=\"sm\" onClick={handleNext} >Tiếp theo</Button>\r\n          </Form>\r\n      </div>\r\n    );\r\n}\r\n\r\n","F:\\ReactJS Project\\training-level-classification\\src\\components\\rankings.jsx",["242"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Rankings(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Bảng xếp hạng trình độ tập luyện</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Tổng điểm</th>\r\n                <th>Xếp loại</th>\r\n                <th>Xếp hạng</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.totalScoresOfCriterias}</td>\r\n                  <td>{athlete.grade}</td>\r\n                  <td>{athlete.rank}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\physical.jsx",["243"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Physical(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố thể lực</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Thời gian phản xạ xuất phát (s)</th>\r\n                <th>Chạy 30m tốc độ cao (s)</th>\r\n                <th>Chạy 30m xuất phát thấp (s)</th>\r\n                <th>Chạy 60m xuất phát thấp (s)</th>\r\n                <th>Chạy 80m xuất phát cao (s)</th>\r\n                <th>Chạy 150m xuất phát cao (s)</th>\r\n                <th>Bật xa tại chỗ (m)</th>\r\n                <th>Bật 3 bước tại chỗ (m)</th>\r\n                <th>Bật 10 bước tại chỗ (m)</th>\r\n                <th>Thời gian chạy 20m cuối trong chạy 100m (s)</th>\r\n                <th>Hệ số sức bền K (s)</th>\r\n                <th>Nâng cao đùi tại chỗ 10s (lần)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[0]}</td>\r\n                  <td>{athlete.criteriasList[1]}</td>\r\n                  <td>{athlete.criteriasList[2]}</td>\r\n                  <td>{athlete.criteriasList[3]}</td>\r\n                  <td>{athlete.criteriasList[4]}</td>\r\n                  <td>{athlete.criteriasList[5]}</td>\r\n                  <td>{athlete.criteriasList[6]}</td>\r\n                  <td>{athlete.criteriasList[7]}</td>\r\n                  <td>{athlete.criteriasList[8]}</td>\r\n                  <td>{athlete.criteriasList[9]}</td>\r\n                  <td>{athlete.criteriasList[10]}</td>\r\n                  <td>{athlete.criteriasList[11]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\technical .jsx",["244"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Technical(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố kỹ thuật</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[12]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\psychophysiology.jsx",["245"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Psychophysiology(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố tâm-sinh lý</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Phản xạ đơn (s)</th>\r\n                <th>Chỉ số dung tích sống (ml/kg)</th>\r\n                <th>Tần số tim hồi phục 30s sau chạy 100m (lần/ph)</th>\r\n                <th>Hàm lượng LA sau chạy 100m (mmol/lít)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[13]}</td>\r\n                  <td>{athlete.criteriasList[14]}</td>\r\n                  <td>{athlete.criteriasList[15]}</td>\r\n                  <td>{athlete.criteriasList[16]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\form.jsx",["246"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Form(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố hình thái</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Chỉ số Quetelet (g/cm)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[17]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header.jsx",["247","248","249","250","251","252"],"import React, { useState } from \"react\";\r\nimport { Col, Collapse, DropdownItem, DropdownMenu, DropdownToggle, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink, Row, UncontrolledButtonDropdown, UncontrolledDropdown } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport {Brand, Home} from './header-components';\r\nimport \"./header.css\";\r\n\r\nexport default function Header(props) {\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n    const toggleMenu = () => setMenuOpen(!menuOpen);\r\n\r\n    return(\r\n        <div className=\"header\">\r\n            <Navbar color=\"dark\" fixed=\"top\" expand=\"md\">\r\n                <NavbarToggler aria-label=\"Menu\" onClick={toggleMenu} />\r\n                <Brand/>\r\n                <Collapse isOpen={menuOpen} navbar>\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <NavLink href=\"/\">Trang chủ</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Yếu tố</DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem href=\"/physical\">Thể lực</DropdownItem>\r\n                                <DropdownItem href=\"/technical\">Kỹ thuật</DropdownItem>\r\n                                <DropdownItem href=\"/psychophysiology\">Tâm-sinh lý</DropdownItem>\r\n                                <DropdownItem href=\"/form\">Hình thái</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink href=\"/athlete-classification\">Phân loại trình độ tập luyện</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/rankings\">Bảng xếp hạng</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header-components.jsx",["253","254","255","256","257"],"import React from \"react\";\r\nimport { Col, NavbarBrand, NavItem, NavLink, Row } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\n\r\nexport const Brand = props => (\r\n    <NavbarBrand href=\"/\" className=\"brand-logo\">\r\n      <span className=\"brand-title\">TrainingLevel100m</span>\r\n    </NavbarBrand>\r\n  );\r\n\r\nexport const Home = props => (\r\n    <div className=\"padding-title\">\r\n        <h2>Chào mừng đến với trang web đánh giá trình độ tập luyện của các VĐV chạy 100m cấp cao </h2>\r\n    </div>\r\n);","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\footer\\footer.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\index.jsx",["258","259","260","261"],["262","263"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\reportWebVitals.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\App.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\footer\\footer.jsx",["264"],"import React from \"react\";\r\nimport { CardFooter, Col, Row } from \"reactstrap\";\r\nimport \"./footer.css\";\r\n\r\n\r\nexport default function Footer(props) {\r\n    return(\r\n     \r\n     <div className=\"footer\">\r\n        &nbsp;\r\n        <Row>\r\n            <Col md=\"2\">TrainingLevel © 2021.</Col>\r\n            <Col md=\"8\"></Col>\r\n            <Col md=\"2\">\r\n                <p>\r\n                    Powered by\r\n                    &nbsp;\r\n                    <a href={\"https://www.facebook.com/thuanmu\"}>ThuanPV</a>\r\n                </p>\r\n            </Col>\r\n        </Row> \r\n     </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\header\\header.jsx",["265","266","267","268"],"import React, { useState } from \"react\";\r\nimport { Collapse, DropdownItem, DropdownMenu, DropdownToggle, Nav, Navbar, NavbarToggler, NavItem, NavLink, Row, UncontrolledButtonDropdown, UncontrolledDropdown } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport {Brand, Home} from './header-components';\r\nimport \"./header.css\";\r\n\r\nexport default function Header(props) {\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n    const toggleMenu = () => setMenuOpen(!menuOpen);\r\n\r\n    return(\r\n        <div className=\"header\">\r\n            <Navbar color=\"dark\" fixed=\"top\" expand=\"md\">\r\n                <NavbarToggler aria-label=\"Menu\" onClick={toggleMenu} />\r\n                <Brand/>\r\n                <Collapse isOpen={menuOpen} navbar>\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav\" href=\"/\">Trang chủ</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav\" href=\"/athletes\">Danh sách Vận động viên</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle className=\"nav\" nav caret>Yếu tố</DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem href=\"/physicalFactors\">Thể lực</DropdownItem>\r\n                                <DropdownItem href=\"/technicalFactors\">Kỹ thuật</DropdownItem>\r\n                                <DropdownItem href=\"/psychophysiologyFactors\">Tâm-sinh lý</DropdownItem>\r\n                                <DropdownItem href=\"/formFactors\">Hình thái</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav\" href=\"/athlete-classification\">Phân loại trình độ tập luyện</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav\" href=\"/rankingsList\">Bảng xếp hạng</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle className=\"nav\" nav caret>Biểu đồ trình độ tập luyện</DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem href=\"/physicalFactorChart\">Yếu tố thể lực</DropdownItem>\r\n                                <DropdownItem href=\"/technicalFactorChart\">Yếu tố kỹ thuật</DropdownItem>\r\n                                <DropdownItem href=\"/psychophysiologyFactorChart\">Yếu tố tâm-sinh lý</DropdownItem>\r\n                                <DropdownItem href=\"/formFactorChart\">Yếu tố hình thái</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layout\\header\\header-components.jsx",["269","270","271"],"import React from \"react\";\r\nimport { Container, NavbarBrand, NavLink, Row } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\n\r\nexport const Brand = props => (\r\n    <NavbarBrand href=\"/\" className=\"brand-logo\">\r\n      <span className=\"brand-title\">TrainingLevel100m</span>\r\n    </NavbarBrand>\r\n  );\r\n\r\nexport const Home = props => (\r\n    <div>\r\n      <Container fluid>\r\n        <h2>Chào mừng đến với trang web đánh giá trình độ tập luyện của các VĐV chạy 100m cấp cao </h2>\r\n      </Container>\r\n    </div>\r\n);","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical.jsx",["272"],"import { render } from \"@testing-library/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {Button, ButtonGroup, Col, Container, Row, Table} from \"reactstrap\";\r\nimport TechnicalFactorService from \"./technical-service\";\r\n\r\nexport default function Technical(props) {\r\n\r\n  const [technicalFactors, setTechnicalFactors] = useState([]);\r\n\r\n  const addTechnicalFactor = () => {\r\n    props.history.push(`/technicalFactors/new`);\r\n  }\r\n\r\n  const viewTechnicalFactor = id => {\r\n    props.history.push(`/technicalFactors/${id}/detail`);\r\n  }\r\n\r\n  const editTechnicalFactor = (id, status) => {\r\n    if (status === '0') {\r\n      props.history.push(`/technicalFactors/${id}/edit`);\r\n    }\r\n    else {\r\n      alert(\"Bạn không thể sửa yếu tố kỹ thuật đã phân loại\");\r\n    }\r\n  }\r\n\r\n  const deleteTechnicalFactor = (id, status) => {\r\n    if (status === '0') {\r\n      TechnicalFactorService.deleteTechnicalFactor(id).then( (res) => {\r\n        setTechnicalFactors(technicalFactors.filter(technicalFactor => technicalFactor.id !== id));\r\n      });\r\n    }\r\n    else {\r\n      alert(\"Bạn không thể xóa yếu tố kỹ thuật đã phân loại\");\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    TechnicalFactorService.getTechnicalFactors().then((res) => {\r\n      setTechnicalFactors(res.data);\r\n    });\r\n  }, []);\r\n\r\n\r\n    return(\r\n        <div>\r\n        <Container>\r\n          <h2>\r\n            <Row>\r\n              <Col md=\"5\">Yếu tố kỹ thuật</Col>\r\n              <Col md=\"5\"></Col>\r\n              <Col md=\"2\">\r\n                <Button size=\"sm\" color=\"success\" onClick={addTechnicalFactor}>Thêm Yếu tố kỹ thuật</Button>\r\n              </Col>\r\n            </Row>\r\n          </h2>\r\n          &nbsp;\r\n          <Table responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>ID Vận động viên</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</th>\r\n                <th>Trạng thái</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n                <th>Hành động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {technicalFactors.map((technicalFactor, i) => (\r\n                <tr>\r\n                  <td>{technicalFactor.id}</td>\r\n                  <td>{technicalFactor.athlete.id}</td>\r\n                  <td>{technicalFactor.athlete.athleteName}</td>\r\n                  <td>{technicalFactor.performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed}</td>\r\n                  <td>{technicalFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</td>\r\n                  <td>{technicalFactor.createAt}</td>\r\n                  <td>{technicalFactor.lastModified}</td>\r\n                  <td>\r\n                    <ButtonGroup>\r\n                      <Button size=\"sm\" color=\"info\" onClick={() => viewTechnicalFactor(technicalFactor.id)}>Xem</Button>\r\n                      <Button size=\"sm\" color=\"primary\" onClick={() => editTechnicalFactor(technicalFactor.id, technicalFactor.status)} >Sửa</Button>\r\n                      <Button size=\"sm\" color=\"danger\" onClick={() => deleteTechnicalFactor(technicalFactor.id, technicalFactor.status)} >Xóa</Button>\r\n                    </ButtonGroup>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology.jsx",["273"],"import { render } from \"@testing-library/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {Button, ButtonGroup, Col, Container, Row, Table} from \"reactstrap\";\r\nimport PsychophysiologyFactorService from \"./psychophysiology-service\";\r\n\r\nexport default function Psychophysiology(props) {\r\n\r\n  const [psychophysiologyFactors, setPsychophysiologyFactors] = useState([]);\r\n\r\n  const addPsychophysiologyFactor = () => {\r\n    props.history.push(`/psychophysiologyFactors/new`);\r\n  }\r\n\r\n  const viewPsychophysiologyFactor = id => {\r\n    props.history.push(`/psychophysiologyFactors/${id}/detail`);\r\n  }\r\n\r\n  const editPsychophysiologyFactor = (id, status) => {\r\n    if (status === '0') {\r\n      props.history.push(`/psychophysiologyFactors/${id}/edit`);\r\n    }\r\n    else {\r\n      alert(\"Bạn không thể sửa yếu tố tâm-sinh lý đã phân loại\");\r\n    }\r\n  }\r\n\r\n  const deletePsychophysiologyFactor = (id, status) => {\r\n    if (status === '0') {\r\n      PsychophysiologyFactorService.deletePsychophysiologyFactor(id).then( (res) => {\r\n        setPsychophysiologyFactors(psychophysiologyFactors.filter(psychophysiologyFactor => psychophysiologyFactor.id !== id));\r\n      });\r\n    }\r\n    else {\r\n      alert(\"Bạn không thể xóa yếu tố tâm-sinh lý đã phân loại\");\r\n    }\r\n  }\r\n\r\n    useEffect(() => {\r\n      PsychophysiologyFactorService.getPsychophysiologyFactors().then((res) => {\r\n        setPsychophysiologyFactors(res.data);\r\n      });\r\n    }, []);\r\n\r\n    return(\r\n        <div>\r\n        <Container>\r\n          <h2>\r\n            <Row>\r\n              <Col md=\"5\">Yếu tố tâm-sinh lý</Col>\r\n              <Col md=\"4\"></Col>\r\n              <Col md=\"3\">\r\n                <Button size=\"sm\" color=\"success\" onClick={addPsychophysiologyFactor}>Thêm Yếu tố tâm-sinh lý</Button>\r\n              </Col>\r\n            </Row>\r\n          </h2>\r\n          &nbsp;\r\n          <Table responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>ID Vận động viên</th>\r\n                <th>Tên Vận động viên</th>\r\n                <th>Phản xạ đơn (s)</th>\r\n                <th>Chỉ số dung tích sống (ml/kg)</th>\r\n                <th>Tần số tim hồi phục 30s sau chạy 100m (lần/ph)</th>\r\n                <th>Hàm lượng LA sau chạy 100m (mmol/lít)</th>\r\n                <th>Trạng thái</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n                <th>Hành động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {psychophysiologyFactors.map((psychophysiologyFactor, i) => (\r\n                <tr>\r\n                  <td>{psychophysiologyFactor.id}</td>\r\n                  <td>{psychophysiologyFactor.athlete.id}</td>\r\n                  <td>{psychophysiologyFactor.athlete.athleteName}</td>\r\n                  <td>{psychophysiologyFactor.singleReflectionTime}</td>\r\n                  <td>{psychophysiologyFactor.livingCapacityQuotient}</td>\r\n                  <td>{psychophysiologyFactor.restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun}</td>\r\n                  <td>{psychophysiologyFactor.lacticAcidContentAfterOneHundredMetersRun}</td>\r\n                  <td>{psychophysiologyFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</td>\r\n                  <td>{psychophysiologyFactor.createAt}</td>\r\n                  <td>{psychophysiologyFactor.lastModified}</td>\r\n                  <td>\r\n                    <ButtonGroup>\r\n                      <Button size=\"sm\" color=\"info\" onClick={() => viewPsychophysiologyFactor(psychophysiologyFactor.id)}>Xem</Button>\r\n                      <Button size=\"sm\" color=\"primary\" onClick={() => editPsychophysiologyFactor(psychophysiologyFactor.id, psychophysiologyFactor.status)} >Sửa</Button>\r\n                      <Button size=\"sm\" color=\"danger\" onClick={() => deletePsychophysiologyFactor(psychophysiologyFactor.id, psychophysiologyFactor.status)} >Xóa</Button>\r\n                    </ButtonGroup>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-update.jsx",["274","275"],"import React, { useEffect, useState } from \"react\";\r\nimport {Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\n// import {syncHistoryWithStore, routerReducer} from 'react-router-redux';\r\nimport AthleteService from \"./athlete-service\";\r\nimport moment from \"moment\";\r\n\r\nexport default function AthleteUpdate(props) {\r\n\r\n    const [athleteId, setAthleteId] = useState(props.match.params.id);\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [dateOfBirth, setDateOfBirth] = useState('');\r\n    const [hometown, setHometown] = useState('');\r\n    const [totalScoresOfCriterias, setTotalScoresOfCriterias] = useState('');\r\n    const [grade, setGrade] = useState('');\r\n    const [athleteRank, setAthleteRank] = useState('');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const handleAthleteId = event => setAthleteId(props.match.params.id);\r\n    const handleAthleteName = event => setAthleteName(event.target.value);\r\n    const handleDateOfBirth = event => setDateOfBirth(event.target.value);\r\n    const handleHometown = event => setHometown(event.target.value);\r\n    const handleTotalScoresOfCriterias = event => setTotalScoresOfCriterias(event.target.value);\r\n    const handleGrade = event => setGrade(event.target.value);\r\n    const handleAthleteRank = event => setAthleteRank(event.target.value);\r\n    \r\n    useEffect(() => {\r\n        if(athleteId)  {\r\n            AthleteService.getAthleteById(athleteId).then( res => {\r\n                let athlete = res.data;\r\n                setAthleteId(athlete.id);\r\n                setAthleteName(athlete.athleteName);\r\n                setDateOfBirth(athlete.dateOfBirth);\r\n                setHometown(athlete.hometown);\r\n                setTotalScoresOfCriterias(athlete.totalScoresOfCriterias);\r\n                setGrade(athlete.grade);\r\n                setAthleteRank(athlete.athleteRank);\r\n                setCreateAt(athlete.createAt);\r\n                setLastModified(athlete.lastModified);\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let athlete = {\r\n            id: athleteId,\r\n            athleteName: athleteName,\r\n            dateOfBirth: athleteId ? dateOfBirth : moment(dateOfBirth).format(\"DD-MM-YYYY\"),\r\n            hometown: hometown,\r\n            totalScoresOfCriterias: totalScoresOfCriterias,\r\n            grade: grade,\r\n            athleteRank: athleteRank,\r\n            createAt: createAt,\r\n            lastModified: lastModified\r\n        };\r\n    \r\n        if(!athleteId) {\r\n            AthleteService.createAthlete(athlete).then(res => {\r\n                props.history.push('/athletes');\r\n            });\r\n        } \r\n        else {\r\n            AthleteService.updateAthlete(athlete, athleteId).then( res => {\r\n                props.history.push('/athletes');\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    const title = <h2>{ athleteId ? \"Sửa Vận động viên\" : \"Thêm Vận động viên\" }</h2>;\r\n            \r\n    return(\r\n        <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={handleSubmit}>\r\n                    {/* <FormGroup>\r\n                        <Label for=\"athlete-id\">Id</Label>\r\n                        <Input type=\"text\" name=\"athlete-id\" id=\"athlete-id\" value={athleteId} onChange={handleAthleteId} />\r\n                    </FormGroup> */}\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-name\">Tên Vận động viên</Label>\r\n                        <Input type=\"text\"  name=\"athlete-name\" id=\"athlete-name\" value={athleteName} onChange={handleAthleteName} required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"date-of-birth\">Ngày sinh</Label>\r\n                        <Input type={athleteId ? \"text\" : \"date\"} name=\"date-of-birth\" id=\"date-of-birth\" value={dateOfBirth} onChange={handleDateOfBirth} required/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"home-town\">Quê quán</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={hometown} onChange={handleHometown} required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"total-scores-of-criterias\">Tổng điểm</Label>\r\n                        <Input type=\"text\" name=\"total-scores-of-criterias\" id=\"total-scores-of-criterias\" value={totalScoresOfCriterias} onChange={handleTotalScoresOfCriterias} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"grade\">Xếp loại</Label>\r\n                        <Input type=\"text\" name=\"grade\" id=\"grade\" value={grade} onChange={handleGrade} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-rank\">Xếp hạng</Label>\r\n                        <Input type=\"text\" name=\"athlete-rank\" id=\"athlete-rank\" value={athleteRank} onChange={handleAthleteRank} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Lưu</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/athletes\">Hủy</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-update.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\athlete\\athlete-detail.jsx",["276","277"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AthleteService from \"./athlete-service\";\r\n\r\nexport default function AthleteDetail(props) {\r\n\r\n    const [athleteId, setAthleteId] = useState(props.match.params.id);\r\n    const [athlete, setAthlete] = useState({});\r\n\r\n    useEffect(() => {\r\n        AthleteService.getAthleteById(athleteId).then( res => {\r\n            setAthlete(res.data);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Vận động viên</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID</span>\r\n                    </dt>\r\n                    <dd>{athlete.id}</dd>\r\n                    <dt>\r\n                        <span>Tên Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athlete.athleteName}</dd>\r\n                    <dt>\r\n                        <span>Ngày sinh</span>\r\n                    </dt>\r\n                    <dd>{athlete.dateOfBirth}</dd>\r\n                    <dt>\r\n                        <span>Quê quán</span>\r\n                    </dt>\r\n                    <dd>{athlete.hometown}</dd>\r\n                    <dt>\r\n                        <span>Tổng điểm</span>\r\n                    </dt>\r\n                    <dd>{athlete.totalScoresOfCriterias}</dd>\r\n                    <dt>\r\n                        <span>Xếp loại</span>\r\n                    </dt>\r\n                    <dd>{athlete.grade}</dd>\r\n                    <dt>\r\n                        <span>Xếp hạng</span>\r\n                    </dt>\r\n                    <dd>{athlete.athleteRank}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{athlete.createAt}</dd>\r\n                    <dt>\r\n                        <span>Cập nhật lần cuối</span>\r\n                    </dt>\r\n                    <dd>{athlete.lastModified}</dd>\r\n                </dl>\r\n                <Button color=\"primary\" tag={Link} to={`/athletes/${athlete.id}/edit`} >Sửa</Button>\r\n                &nbsp;\r\n                <Button color=\"info\" tag={Link} to=\"/athletes\">Quay lại</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-update.jsx",["278","279","280"],"import React, { useEffect, useState } from \"react\";\r\nimport {Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport TechnicalFactorService from \"./technical-service\";\r\nimport AthleteService from \"../../athlete/athlete-service\";\r\n\r\nexport default function TechnicalFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed, setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [status, setStatus] = useState('0');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const handleChangeAthleteId = event => setAthleteId(event.target.value);\r\n    const handleChangePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed = event => setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(event.target.value);\r\n    \r\n    useEffect(() => {\r\n        if(id)  {\r\n            TechnicalFactorService.getTechnicalFactorById(id).then( res => {\r\n                let technicalFactor = res.data;\r\n                setId(technicalFactor.id);\r\n                setAthleteId(technicalFactor.athlete.id);\r\n                setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(technicalFactor.performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed);\r\n                setStatus(technicalFactor.status);\r\n                setCreateAt(technicalFactor.createAt);\r\n                setLastModified(technicalFactor.lastModified);\r\n            });\r\n        }\r\n\r\n        AthleteService.getAthletes().then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let technicalFactor = {\r\n            id: id,\r\n            athlete: {id: athleteId ? athleteId : athletes[0].id},\r\n            performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed: performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed,\r\n            status: status\r\n        };\r\n\r\n        if(!id) {\r\n            TechnicalFactorService.createTechnicalFactor(technicalFactor).then(res => {\r\n                props.history.push('/technicalFactors');\r\n            });\r\n        } \r\n        else {\r\n            TechnicalFactorService.updateTechnicalFactor(technicalFactor, id).then( res => {\r\n                props.history.push('/technicalFactors');\r\n            });\r\n        }\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa Yếu tố kỹ thuật\" : \"Thêm Yếu tố kỹ thuật\" }</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-id\">ID Vận động viên</Label>\r\n                        <Input type=\"select\" name=\"athlete-id\" id=\"athlete-id\" value={athleteId} onChange={handleChangeAthleteId}>\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.id}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"performance-difference\">Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</Label>\r\n                        <Input type=\"text\" name=\"performance-difference\" id=\"performance-difference\" value={performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} onChange={handleChangePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Lưu</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/technicalFactors\">Hủy</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-update.jsx",["281","282","283"],"import React, { useEffect, useState } from \"react\";\r\nimport {Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport PhysicalFactorService from \"./physical-service\";\r\nimport AthleteService from \"../../athlete/athlete-service\";\r\n\r\nexport default function PhysicalFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [timeOfReflectionStart, setTimeOfReflectionStart] = useState('');\r\n    const [thirtyMetersRunAtHighSpeed, setThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [thirtyMetersRunWithLowStart, setThirtyMetersRunWithLowStart] = useState('');\r\n    const [sixtyMetersRunWithLowStart, setSixtyMetersRunWithLowStart] = useState('');\r\n    const [eightyMetersRunWithHighStart, setEightyMetersRunWithHighStart] = useState('');\r\n    const [oneHundredFiftyMetersRunWithHighStart, setOneHundredFiftyMetersRunWithHighStart] = useState('');\r\n    const [awayJumpInPlace, setAwayJumpInPlace] = useState('');\r\n    const [threeStepsJumpInPlace, setThreeStepsJumpInPlace] = useState('');\r\n    const [tenStepsJumpInPlace, setTenStepsJumpInPlace] = useState('');\r\n    const [runTimeOfLastTwentyMetersInOneHundredMetersRun, setRunTimeOfLastTwentyMetersInOneHundredMetersRun] = useState('');\r\n    const [strengthCoefficient_K, setStrengthCoefficient_K] = useState('');\r\n    const [thighsRaiseInPlaceForTenSeconds, setThighsRaiseInPlaceForTenSeconds] = useState('');\r\n    const [status, setStatus] = useState('0');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const handleChangeAthleteId = event => setAthleteId(event.target.value);\r\n    const handleChangeTimeOfReflectionStart = event => setTimeOfReflectionStart(event.target.value);\r\n    const handleChangeThirtyMetersRunAtHighSpeed = event => setThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleChangeThirtyMetersRunWithLowStart = event => setThirtyMetersRunWithLowStart(event.target.value);\r\n    const handleChangeSixtyMetersRunWithLowStart = event => setSixtyMetersRunWithLowStart(event.target.value);\r\n    const handleChangeEightyMetersRunWithHighStart = event => setEightyMetersRunWithHighStart(event.target.value);\r\n    const handleChangeOneHundredFiftyMetersRunWithHighStart = event => setOneHundredFiftyMetersRunWithHighStart(event.target.value);\r\n    const handleChangeAwayJumpInPlace = event => setAwayJumpInPlace(event.target.value);\r\n    const handleChangeThreeStepsJumpInPlace = event => setThreeStepsJumpInPlace(event.target.value);\r\n    const handleChangeTenStepsJumpInPlace = event => setTenStepsJumpInPlace(event.target.value);\r\n    const handleChangeRunTimeOfLastTwentyMetersInOneHundredMetersRun = event => setRunTimeOfLastTwentyMetersInOneHundredMetersRun(event.target.value);\r\n    const handleChangeStrengthCoefficient_K = event => setStrengthCoefficient_K(event.target.value);\r\n    const handleChangeThighsRaiseInPlaceForTenSeconds = event => setThighsRaiseInPlaceForTenSeconds(event.target.value);\r\n\r\n    useEffect(() => {\r\n        if(id)  {\r\n            PhysicalFactorService.getPhysicalFactorById(id).then( res => {\r\n                let physicalFactor = res.data;\r\n                setId(physicalFactor.id);\r\n                setAthleteId(physicalFactor.athlete.id);\r\n                setTimeOfReflectionStart(physicalFactor.timeOfReflectionStart);\r\n                setThirtyMetersRunAtHighSpeed(physicalFactor.thirtyMetersRunAtHighSpeed);\r\n                setThirtyMetersRunWithLowStart(physicalFactor.thirtyMetersRunWithLowStart);\r\n                setSixtyMetersRunWithLowStart(physicalFactor.sixtyMetersRunWithLowStart);\r\n                setEightyMetersRunWithHighStart(physicalFactor.eightyMetersRunWithHighStart);\r\n                setOneHundredFiftyMetersRunWithHighStart(physicalFactor.oneHundredFiftyMetersRunWithHighStart);\r\n                setAwayJumpInPlace(physicalFactor.awayJumpInPlace);\r\n                setThreeStepsJumpInPlace(physicalFactor.threeStepsJumpInPlace);\r\n                setTenStepsJumpInPlace(physicalFactor.tenStepsJumpInPlace);\r\n                setRunTimeOfLastTwentyMetersInOneHundredMetersRun(physicalFactor.runTimeOfLastTwentyMetersInOneHundredMetersRun);\r\n                setStrengthCoefficient_K(physicalFactor.strengthCoefficient_K);\r\n                setThighsRaiseInPlaceForTenSeconds(physicalFactor.thighsRaiseInPlaceForTenSeconds);\r\n                setStatus(physicalFactor.status);\r\n                setCreateAt(physicalFactor.createAt);\r\n                setLastModified(physicalFactor.lastModified);\r\n            });\r\n        }\r\n\r\n        AthleteService.getAthletes().then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let physicalFactor = {\r\n            id: id,\r\n            athlete: {id: athleteId ? athleteId : athletes[0].id},\r\n            timeOfReflectionStart: timeOfReflectionStart,\r\n            thirtyMetersRunAtHighSpeed: thirtyMetersRunAtHighSpeed,\r\n            thirtyMetersRunWithLowStart: thirtyMetersRunWithLowStart,\r\n            sixtyMetersRunWithLowStart: sixtyMetersRunWithLowStart,\r\n            eightyMetersRunWithHighStart: eightyMetersRunWithHighStart,\r\n            oneHundredFiftyMetersRunWithHighStart: oneHundredFiftyMetersRunWithHighStart,\r\n            awayJumpInPlace: awayJumpInPlace,\r\n            threeStepsJumpInPlace: threeStepsJumpInPlace,\r\n            tenStepsJumpInPlace: tenStepsJumpInPlace,\r\n            runTimeOfLastTwentyMetersInOneHundredMetersRun: runTimeOfLastTwentyMetersInOneHundredMetersRun,\r\n            strengthCoefficient_K: strengthCoefficient_K,\r\n            thighsRaiseInPlaceForTenSeconds: thighsRaiseInPlaceForTenSeconds,\r\n            status: status\r\n        };\r\n\r\n        if(!id) { \r\n            PhysicalFactorService.createPhysicalFactor(physicalFactor).then(res => {\r\n                props.history.push('/physicalFactors');\r\n            });\r\n        } \r\n        else {\r\n            PhysicalFactorService.updatePhysicalFactor(physicalFactor, id).then( res => {\r\n                props.history.push('/physicalFactors');\r\n            });\r\n        }\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa Yếu tố thể lực\" : \"Thêm Yếu tố thể lực\" }</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-id\">ID Vận động viên</Label>\r\n                        <Input type=\"select\" name=\"athlete-id\" id=\"athlete-id\" value={athleteId} onChange={handleChangeAthleteId}>\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.id}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-time-of-reflection-start\">1. Thời gian phản xạ xuất phát (s)</Label>\r\n                        <Input type=\"text\" id=\"time-of-reflection-start\" name=\"criteria\" value={timeOfReflectionStart} onChange={handleChangeTimeOfReflectionStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thirty-meters-run-at-high-speed\">2. Chạy 30m tốc độ cao (s)</Label>\r\n                        <Input type=\"text\" id=\"thirty-meters-run-at-high-speed\" name=\"criteria\" value={thirtyMetersRunAtHighSpeed} onChange={handleChangeThirtyMetersRunAtHighSpeed} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thirty-meters-run-with-low-start\">3. Chạy 30m xuất phát thấp (s)</Label>\r\n                        <Input type=\"text\" id=\"thirty-meters-run-with-low-start\" name=\"criteria\" value={thirtyMetersRunWithLowStart} onChange={handleChangeThirtyMetersRunWithLowStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-sixty-meters-run-with-low-start\">4. Chạy 60m xuất phát thấp (s)</Label>\r\n                        <Input type=\"text\" id=\"sixty-meters-run-with-low-start\" name=\"criteria\" value={sixtyMetersRunWithLowStart} onChange={handleChangeSixtyMetersRunWithLowStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-eighty-meters-run-with-high-start\">5. Chạy 80m xuất phát cao (s)</Label>\r\n                        <Input type=\"text\" id=\"eighty-meters-run-with-high-start\" name=\"criteria\" value={eightyMetersRunWithHighStart} onChange={handleChangeEightyMetersRunWithHighStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-one-hundred-fifty-meters-run-with-high-start\">6. Chạy 150m xuất phát cao (s)</Label>\r\n                        <Input type=\"text\" id=\"one-hundred-fifty-meters-run-with-high-start\" name=\"criteria\" value={oneHundredFiftyMetersRunWithHighStart} onChange={handleChangeOneHundredFiftyMetersRunWithHighStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-away-jump-in-place\">7. Bật xa tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"away-jump-in-place\" name=\"criteria\" value={awayJumpInPlace} onChange={handleChangeAwayJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"three-steps-jump-in-place\">8. Bật 3 bước tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"three-steps-jump-in-place\" name=\"criteria\" value={threeStepsJumpInPlace} onChange={handleChangeThreeStepsJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-ten-steps-jump-in-place\">9. Bật 10 bước tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"ten-steps-jump-in-place\" name=\"criteria\" value={tenStepsJumpInPlace} onChange={handleChangeTenStepsJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-run-time-of-last-twenty-meters-in-one-hundred-meters-run\">10. Thời gian của 20m cuối trong chạy 100m (s)</Label>\r\n                        <Input type=\"text\" id=\"run-time-of-last-twenty-meters-in-one-hundred-meters-run\" name=\"criteria\" value={runTimeOfLastTwentyMetersInOneHundredMetersRun} onChange={handleChangeRunTimeOfLastTwentyMetersInOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-strength-coefficient-K\">11. Hệ số sức bền K (s)</Label>\r\n                        <Input type=\"text\" id=\"strength-coefficient-K\" name=\"criteria\" value={strengthCoefficient_K} onChange={handleChangeStrengthCoefficient_K} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thighs-raise-in-place-for-ten-seconds\">12. Nâng cao đùi tại chỗ 10s (lần)</Label>\r\n                        <Input type=\"text\" id=\"thighs-raise-in-place-for-ten-seconds\" name=\"criteria\" value={thighsRaiseInPlaceForTenSeconds} onChange={handleChangeThighsRaiseInPlaceForTenSeconds} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Lưu</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/physicalFactors\">Hủy</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-update.jsx",["284","285","286"],"import React, { useEffect, useState } from \"react\";\r\nimport {Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport PsychophysiologyFactorService from \"./psychophysiology-service\";\r\nimport AthleteService from \"../../athlete/athlete-service\";\r\n\r\nexport default function PsychophysiologyFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [singleReflectionTime, setSingleReflectionTime] = useState('');\r\n    const [livingCapacityQuotient, setLivingCapacityQuotient] = useState('');\r\n    const [restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun, setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun] = useState('');\r\n    const [lacticAcidContentAfterOneHundredMetersRun, setLacticAcidContentAfterOneHundredMetersRun] = useState('');\r\n    const [status, setStatus] = useState('0');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const handleChangeAthleteId = event => setAthleteId(event.target.value);\r\n    const handleChangeSingleReflectionTime = event => setSingleReflectionTime(event.target.value);\r\n    const handleChangeLivingCapacityQuotient = event => setLivingCapacityQuotient(event.target.value);\r\n    const handleChangeRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun = event => setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(event.target.value);\r\n    const handleChangeLacticAcidContentAfterOneHundredMetersRun = event => setLacticAcidContentAfterOneHundredMetersRun(event.target.value);\r\n\r\n    useEffect(() => {\r\n        if(id)  {\r\n            PsychophysiologyFactorService.getPsychophysiologyFactorById(id).then( res => {\r\n                let psychophysiologyFactor = res.data;\r\n                setId(psychophysiologyFactor.id);\r\n                setAthleteId(psychophysiologyFactor.athlete.id);\r\n                setSingleReflectionTime(psychophysiologyFactor.singleReflectionTime);\r\n                setLivingCapacityQuotient(psychophysiologyFactor.livingCapacityQuotient);\r\n                setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(psychophysiologyFactor.restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun);\r\n                setLacticAcidContentAfterOneHundredMetersRun(psychophysiologyFactor.lacticAcidContentAfterOneHundredMetersRun);\r\n                setStatus(psychophysiologyFactor.status);\r\n                setCreateAt(psychophysiologyFactor.createAt);\r\n                setLastModified(psychophysiologyFactor.lastModified);\r\n            });\r\n        }\r\n\r\n        AthleteService.getAthletes().then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let psychophysiologyFactor = {\r\n            id: id,\r\n            athlete: {id: athleteId ? athleteId : athletes[0].id},\r\n            singleReflectionTime: singleReflectionTime,\r\n            livingCapacityQuotient: livingCapacityQuotient,\r\n            restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun: restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun,\r\n            lacticAcidContentAfterOneHundredMetersRun: lacticAcidContentAfterOneHundredMetersRun,\r\n            status: status\r\n        };\r\n        \r\n        if(!id) {\r\n            PsychophysiologyFactorService.createPsychophysiologyFactor(psychophysiologyFactor).then(res => {\r\n                props.history.push('/psychophysiologyFactors');\r\n            });\r\n        } \r\n        else {\r\n            PsychophysiologyFactorService.updatePsychophysiologyFactor(psychophysiologyFactor, id).then( res => {\r\n                props.history.push('/psychophysiologyFactors');\r\n            });\r\n        }\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa Yếu tố tâm-sinh lý\" : \"Thêm Yếu tố tâm-sinh lý\" }</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-id\">ID Vận động viên</Label>\r\n                        <Input type=\"select\" name=\"athlete-id\" id=\"athlete-id\" value={athleteId} onChange={handleChangeAthleteId}>\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.id}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-single-reflection-time\">14. Thời gian phản xạ đơn (s)</Label>\r\n                        <Input type=\"text\" id=\"single-reflection-time\" name=\"criteria\" value={singleReflectionTime} onChange={handleChangeSingleReflectionTime} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-living-capacity-quotient\">15. Chỉ số dung tích sống (ml/kg)</Label>\r\n                        <Input type=\"text\" id=\"living-capacity-quotient\" name=\"criteria\" value={livingCapacityQuotient} onChange={handleChangeLivingCapacityQuotient} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\">16. Tần số tim hồi phục 30s sau chạy 100m (lần/phút)</Label>\r\n                        <Input type=\"text\" id=\"restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\" name=\"criteria\" value={restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} onChange={handleChangeRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-lactic-acid-content-after-one-hundred-meters-run\">17. Hàm lượng axit lactic sau chạy 100m (mmol/lít)</Label>\r\n                        <Input type=\"text\" id=\"lactic-acid-content-after-one-hundred-meters-run\" name=\"criteria\" value={lacticAcidContentAfterOneHundredMetersRun} onChange={handleChangeLacticAcidContentAfterOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Lưu</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/psychophysiologyFactors\">Hủy</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athlete-classification.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athleteClass.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\classification-function\\athlete-classification-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\rankings\\rankings.jsx",["287","288"],"import moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Col, Container, DropdownItem, DropdownMenu, DropdownToggle, Label, Table, UncontrolledDropdown} from \"reactstrap\";\r\nimport AthleteClassificationService from \"../classification-function/athlete-classification-service.js\"\r\n\r\nexport default function Rankings(props) {\r\n\r\n  const [athleteClassifications, setAthleteClassifications] = useState([]);\r\n  const [rankings, setRankings] = useState([]);\r\n  const [monthYear, setMonthYear] = useState('');\r\n\r\n  const handleOption = (month, year, monthYear) => {\r\n    setMonthYear(monthYear);\r\n    AthleteClassificationService.getRankingsByMonthAndYear(month, year).then((res) => {\r\n      setRankings(res.data);\r\n    });\r\n  }\r\n  \r\n  useEffect(() => {\r\n    AthleteClassificationService.getAthleteClassificationByLastDateOfMonth().then((res) => {\r\n      setAthleteClassifications(res.data);\r\n      let athleteClassifications = res.data;\r\n      handleOption(athleteClassifications[0].createAt.substring(3,5), athleteClassifications[0].createAt.substring(6,10), athleteClassifications[0].createAt.substring(3,10));\r\n    });\r\n  },[]);\r\n\r\n    return(\r\n        <div>\r\n        <Container>\r\n          <h2>Bảng xếp hạng trình độ tập luyện</h2>\r\n          &nbsp;\r\n          <UncontrolledDropdown inNavbar>\r\n            <Label md=\"5\">Tháng</Label>\r\n            <DropdownToggle nav caret>{monthYear}</DropdownToggle>\r\n            <DropdownMenu>\r\n              {athleteClassifications.map((athleteClassification, i) => (\r\n                <DropdownItem onClick = {() => handleOption(athleteClassification.createAt.substring(3,5), athleteClassification.createAt.substring(6,10), athleteClassification.createAt.substring(3,10))}>{athleteClassification.createAt.substring(3,10)}</DropdownItem>\r\n              ))}\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n          &nbsp;\r\n          <Table responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>ID Vận động viên</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>ID Yếu tố thể lực</th>\r\n                <th>ID Yếu tố kỹ thuật</th>\r\n                <th>ID Yếu tố tâm-sinh lý</th>\r\n                <th>ID Yếu tố hình thái</th>\r\n                <th>Tổng điểm</th>\r\n                <th>Xếp loại</th>\r\n                <th>Xếp hạng</th>\r\n                <th>Số Vận động viên</th>\r\n                <th>Ngày tạo</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rankings.map((athleteClassification, i) => (\r\n                <tr>\r\n                  <td><Link to={`/athletes/${athleteClassification.athlete.id}/detail`}>{athleteClassification.athlete.id}</Link></td>\r\n                  <td>{athleteClassification.athlete.athleteName}</td>\r\n                  <td><Link to={`/physicalFactors/${athleteClassification.physicalFactor.id}/detail`}>{athleteClassification.physicalFactor.id}</Link></td>\r\n                  <td><Link to={`/technicalFactors/${athleteClassification.technicalFactor.id}/detail`}>{athleteClassification.technicalFactor.id}</Link></td>\r\n                  <td><Link to={`/psychophysiologyFactors/${athleteClassification.psychophysiologyFactor.id}/detail`}>{athleteClassification.psychophysiologyFactor.id}</Link></td>\r\n                  <td><Link to={`/formFactors/${athleteClassification.formFactor.id}/detail`}>{athleteClassification.formFactor.id}</Link></td>\r\n                  <td>{athleteClassification.totalScoresOfCriterias}</td>\r\n                  <td>{athleteClassification.grade}</td>\r\n                  <td>{athleteClassification.athleteRank}</td>\r\n                  <td>{athleteClassification.athleteCount}</td>\r\n                  <td>{athleteClassification.createAt}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utilities\\now-date-time.js",[],["289","290"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\form\\form-detail.jsx",["291","292"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport FormFactorService from \"./form-service\";\r\n\r\nexport default function FormFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [formFactor, setFormFactor] = useState({});\r\n\r\n    useEffect(() => {\r\n        FormFactorService.getFormFactorById(id).then( res => {\r\n            var formFactor = res.data;\r\n            setFormFactor(formFactor);\r\n            setAthleteId(formFactor.athlete.id);\r\n            setAthleteName(formFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố hình thái</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID</span>\r\n                    </dt>\r\n                    <dd>{formFactor.id}</dd>\r\n                    <dt>\r\n                        <span>ID Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteId}</dd>\r\n                    <dt>\r\n                        <span>Tên Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Chỉ số Quetelet (g/cm)</span>\r\n                    </dt>\r\n                    <dd>{formFactor.queteletQuotient}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{formFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{formFactor.createAt}</dd>\r\n                    <dt>\r\n                        <span>Cập nhật lần cuối</span>\r\n                    </dt>\r\n                    <dd>{formFactor.lastModified}</dd>\r\n                </dl>\r\n                <Button color=\"primary\" tag={Link} to={`/formFactors/${formFactor.id}/edit`} >Sửa</Button>\r\n                &nbsp;\r\n                <Button color=\"info\" tag={Link} to=\"/formFactors\">Quay lại</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\physical\\physical-detail.jsx",["293","294"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport PhysicalFactorService from \"./physical-service\";\r\n\r\nexport default function PhysicalFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [physicalFactor, setPhysicalFactor] = useState({});\r\n\r\n    useEffect(() => {\r\n        PhysicalFactorService.getPhysicalFactorById(id).then( res => {\r\n            var physicalFactor = res.data;\r\n            setPhysicalFactor(physicalFactor);\r\n            setAthleteId(physicalFactor.athlete.id);\r\n            setAthleteName(physicalFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố thể lực</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.id}</dd>\r\n                    <dt>\r\n                        <span>ID Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteId}</dd>\r\n                    <dt>\r\n                        <span>Tên Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>1. Thời gian phản xạ xuất phát (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.timeOfReflectionStart}</dd>\r\n                    <dt>\r\n                        <span>2. Chạy 30m tốc độ cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thirtyMetersRunAtHighSpeed}</dd>\r\n                    <dt>\r\n                        <span>3. Chạy 30m xuất phát thấp (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thirtyMetersRunWithLowStart}</dd>\r\n                    <dt>\r\n                        <span>4. Chạy 60m xuất phát thấp (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.sixtyMetersRunWithLowStart}</dd>\r\n                    <dt>\r\n                        <span>5. Chạy 80m xuất phát cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.eightyMetersRunWithHighStart}</dd>\r\n                    <dt>\r\n                        <span>6. Chạy 150m xuất phát cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.oneHundredFiftyMetersRunWithHighStart}</dd>\r\n                    <dt>\r\n                        <span>7. Bật xa tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.awayJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>8. Bật 3 bước tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.threeStepsJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>9. Bật 10 bước tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.tenStepsJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>10. Thời gian của 20m cuối trong chạy 100m (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.runTimeOfLastTwentyMetersInOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>11. Hệ số sức bền K (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.strengthCoefficient_K}</dd>\r\n                    <dt>\r\n                        <span>12. Nâng cao đùi tại chỗ 10s (lần)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thighsRaiseInPlaceForTenSeconds}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.createAt}</dd>\r\n                    <dt>\r\n                        <span>Cập nhật lần cuối</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.lastModified}</dd>\r\n                </dl>\r\n                <Button color=\"primary\" tag={Link} to={`/physicalFactors/${physicalFactor.id}/edit`} >Sửa</Button>\r\n                &nbsp;\r\n                <Button color=\"info\" tag={Link} to=\"/physicalFactors\">Quay lại</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\psychophysiology\\psychophysiology-detail.jsx",["295","296"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport PsychophysiologyFactorService from \"./psychophysiology-service\";\r\n\r\nexport default function PsychophysiologyFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [psychophysiologyFactor, setPsychophysiologyFactor] = useState({});\r\n\r\n    useEffect(() => {\r\n        PsychophysiologyFactorService.getPsychophysiologyFactorById(id).then( res => {\r\n            var psychophysiologyFactor = res.data;\r\n            setPsychophysiologyFactor(psychophysiologyFactor);\r\n            setAthleteId(psychophysiologyFactor.athlete.id);\r\n            setAthleteName(psychophysiologyFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố tâm-sinh lý</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.id}</dd>\r\n                    <dt>\r\n                        <span>ID Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteId}</dd>\r\n                    <dt>\r\n                        <span>Tên Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>14. Thời gian phản xạ đơn (s)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.singleReflectionTime}</dd>\r\n                    <dt>\r\n                        <span>15. Chỉ số dung tích sống (ml/kg)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.livingCapacityQuotient}</dd>\r\n                    <dt>\r\n                        <span>16. Tần số tim hồi phục 30s sau chạy 100m (lần/phút)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>17. Hàm lượng axit lactic sau chạy 100m (mmol/lít)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.lacticAcidContentAfterOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.createAt}</dd>\r\n                    <dt>\r\n                        <span>Cập nhật lần cuối</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.lastModified}</dd>\r\n                </dl>\r\n                <Button color=\"primary\" tag={Link} to={`/psychophysiologyFactors/${psychophysiologyFactor.id}/edit`} >Sửa</Button>\r\n                &nbsp;\r\n                <Button color=\"info\" tag={Link} to=\"/psychophysiologyFactors\">Quay lại</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\factors\\technical\\technical-detail.jsx",["297","298"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport TechnicalFactorService from \"./technical-service\";\r\n\r\nexport default function TechnicalFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [technicalFactor, setTechnicalFactor] = useState({});\r\n\r\n    useEffect(() => {\r\n        TechnicalFactorService.getTechnicalFactorById(id).then( res => {\r\n            var technicalFactor = res.data;\r\n            setTechnicalFactor(technicalFactor);\r\n            setAthleteId(technicalFactor.athlete.id);\r\n            setAthleteName(technicalFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố kỹ thuật</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.id}</dd>\r\n                    <dt>\r\n                        <span>ID Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteId}</dd>\r\n                    <dt>\r\n                        <span>Tên Vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.createAt}</dd>\r\n                    <dt>\r\n                        <span>Cập nhật lần cuối</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.lastModified}</dd>\r\n                </dl>\r\n                <Button color=\"primary\" tag={Link} to={`/technicalFactors/${technicalFactor.id}/edit`} >Sửa</Button>\r\n                &nbsp;\r\n                <Button color=\"info\" tag={Link} to=\"/technicalFactors\">Quay lại</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\psychophysiologyFactorChart.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\formFactorChart.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\technicalFactorChart.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\charts\\physicalFactorChart.jsx",[],{"ruleId":"299","severity":1,"message":"300","line":9,"column":10,"nodeType":"301","messageId":"302","endLine":9,"endColumn":18},{"ruleId":"299","severity":1,"message":"303","line":10,"column":10,"nodeType":"301","messageId":"302","endLine":10,"endColumn":21},{"ruleId":"299","severity":1,"message":"304","line":11,"column":8,"nodeType":"301","messageId":"302","endLine":11,"endColumn":14},{"ruleId":"299","severity":1,"message":"305","line":12,"column":8,"nodeType":"301","messageId":"302","endLine":12,"endColumn":14},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","replacedBy":"309"},{"ruleId":"299","severity":1,"message":"310","line":6,"column":10,"nodeType":"301","messageId":"302","endLine":6,"endColumn":17},{"ruleId":"306","replacedBy":"311"},{"ruleId":"308","replacedBy":"312"},{"ruleId":"299","severity":1,"message":"313","line":3,"column":18,"nodeType":"301","messageId":"302","endLine":3,"endColumn":27},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"315","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":13},{"ruleId":"299","severity":1,"message":"316","line":2,"column":82,"nodeType":"301","messageId":"302","endLine":2,"endColumn":93},{"ruleId":"299","severity":1,"message":"317","line":2,"column":128,"nodeType":"301","messageId":"302","endLine":2,"endColumn":131},{"ruleId":"299","severity":1,"message":"318","line":2,"column":133,"nodeType":"301","messageId":"302","endLine":2,"endColumn":159},{"ruleId":"299","severity":1,"message":"319","line":3,"column":21,"nodeType":"301","messageId":"302","endLine":3,"endColumn":25},{"ruleId":"299","severity":1,"message":"320","line":4,"column":16,"nodeType":"301","messageId":"302","endLine":4,"endColumn":20},{"ruleId":"299","severity":1,"message":"315","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":13},{"ruleId":"299","severity":1,"message":"321","line":2,"column":28,"nodeType":"301","messageId":"302","endLine":2,"endColumn":35},{"ruleId":"299","severity":1,"message":"322","line":2,"column":37,"nodeType":"301","messageId":"302","endLine":2,"endColumn":44},{"ruleId":"299","severity":1,"message":"317","line":2,"column":46,"nodeType":"301","messageId":"302","endLine":2,"endColumn":49},{"ruleId":"299","severity":1,"message":"319","line":3,"column":21,"nodeType":"301","messageId":"302","endLine":3,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":9,"column":10,"nodeType":"301","messageId":"302","endLine":9,"endColumn":18},{"ruleId":"299","severity":1,"message":"303","line":10,"column":10,"nodeType":"301","messageId":"302","endLine":10,"endColumn":21},{"ruleId":"299","severity":1,"message":"304","line":11,"column":8,"nodeType":"301","messageId":"302","endLine":11,"endColumn":14},{"ruleId":"299","severity":1,"message":"305","line":12,"column":8,"nodeType":"301","messageId":"302","endLine":12,"endColumn":14},{"ruleId":"306","replacedBy":"323"},{"ruleId":"308","replacedBy":"324"},{"ruleId":"299","severity":1,"message":"325","line":2,"column":10,"nodeType":"301","messageId":"302","endLine":2,"endColumn":20},{"ruleId":"299","severity":1,"message":"317","line":2,"column":110,"nodeType":"301","messageId":"302","endLine":2,"endColumn":113},{"ruleId":"299","severity":1,"message":"318","line":2,"column":115,"nodeType":"301","messageId":"302","endLine":2,"endColumn":141},{"ruleId":"299","severity":1,"message":"319","line":3,"column":21,"nodeType":"301","messageId":"302","endLine":3,"endColumn":25},{"ruleId":"299","severity":1,"message":"320","line":4,"column":16,"nodeType":"301","messageId":"302","endLine":4,"endColumn":20},{"ruleId":"299","severity":1,"message":"322","line":2,"column":34,"nodeType":"301","messageId":"302","endLine":2,"endColumn":41},{"ruleId":"299","severity":1,"message":"317","line":2,"column":43,"nodeType":"301","messageId":"302","endLine":2,"endColumn":46},{"ruleId":"299","severity":1,"message":"319","line":3,"column":21,"nodeType":"301","messageId":"302","endLine":3,"endColumn":25},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"314","line":1,"column":10,"nodeType":"301","messageId":"302","endLine":1,"endColumn":16},{"ruleId":"299","severity":1,"message":"326","line":20,"column":11,"nodeType":"301","messageId":"302","endLine":20,"endColumn":26},{"ruleId":"327","severity":1,"message":"328","line":43,"column":7,"nodeType":"329","endLine":43,"endColumn":9,"suggestions":"330"},{"ruleId":"299","severity":1,"message":"331","line":8,"column":23,"nodeType":"301","messageId":"302","endLine":8,"endColumn":35},{"ruleId":"327","severity":1,"message":"328","line":15,"column":7,"nodeType":"329","endLine":15,"endColumn":9,"suggestions":"332"},{"ruleId":"299","severity":1,"message":"333","line":14,"column":12,"nodeType":"301","messageId":"302","endLine":14,"endColumn":20},{"ruleId":"299","severity":1,"message":"334","line":15,"column":12,"nodeType":"301","messageId":"302","endLine":15,"endColumn":24},{"ruleId":"327","severity":1,"message":"335","line":36,"column":7,"nodeType":"329","endLine":36,"endColumn":9,"suggestions":"336"},{"ruleId":"299","severity":1,"message":"333","line":25,"column":12,"nodeType":"301","messageId":"302","endLine":25,"endColumn":20},{"ruleId":"299","severity":1,"message":"334","line":26,"column":12,"nodeType":"301","messageId":"302","endLine":26,"endColumn":24},{"ruleId":"327","severity":1,"message":"335","line":69,"column":7,"nodeType":"329","endLine":69,"endColumn":9,"suggestions":"337"},{"ruleId":"299","severity":1,"message":"333","line":17,"column":12,"nodeType":"301","messageId":"302","endLine":17,"endColumn":20},{"ruleId":"299","severity":1,"message":"334","line":18,"column":12,"nodeType":"301","messageId":"302","endLine":18,"endColumn":24},{"ruleId":"327","severity":1,"message":"335","line":45,"column":7,"nodeType":"329","endLine":45,"endColumn":9,"suggestions":"338"},{"ruleId":"299","severity":1,"message":"339","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":14},{"ruleId":"299","severity":1,"message":"315","line":4,"column":9,"nodeType":"301","messageId":"302","endLine":4,"endColumn":12},{"ruleId":"306","replacedBy":"340"},{"ruleId":"308","replacedBy":"341"},{"ruleId":"299","severity":1,"message":"342","line":8,"column":16,"nodeType":"301","messageId":"302","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"335","line":20,"column":7,"nodeType":"329","endLine":20,"endColumn":9,"suggestions":"343"},{"ruleId":"299","severity":1,"message":"342","line":8,"column":16,"nodeType":"301","messageId":"302","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"335","line":20,"column":7,"nodeType":"329","endLine":20,"endColumn":9,"suggestions":"344"},{"ruleId":"299","severity":1,"message":"342","line":8,"column":16,"nodeType":"301","messageId":"302","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"335","line":20,"column":7,"nodeType":"329","endLine":20,"endColumn":9,"suggestions":"345"},{"ruleId":"299","severity":1,"message":"342","line":8,"column":16,"nodeType":"301","messageId":"302","endLine":8,"endColumn":21},{"ruleId":"327","severity":1,"message":"335","line":20,"column":7,"nodeType":"329","endLine":20,"endColumn":9,"suggestions":"346"},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","no-native-reassign",["347"],"no-negated-in-lhs",["348"],"'connect' is defined but never used.",["347"],["348"],"'Container' is defined but never used.","'render' is defined but never used.","'Col' is defined but never used.","'NavbarBrand' is defined but never used.","'Row' is defined but never used.","'UncontrolledButtonDropdown' is defined but never used.","'Link' is defined but never used.","'Home' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.",["347"],["348"],"'CardFooter' is defined but never used.","'handleAthleteId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'athleteId'. Either include it or remove the dependency array.","ArrayExpression",["349"],"'setAthleteId' is assigned a value but never used.",["350"],"'createAt' is assigned a value but never used.","'lastModified' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["351"],["352"],["353"],"'moment' is defined but never used.",["347"],["348"],"'setId' is assigned a value but never used.",["354"],["355"],["356"],["357"],"no-global-assign","no-unsafe-negation",{"desc":"358","fix":"359"},{"desc":"358","fix":"360"},{"desc":"361","fix":"362"},{"desc":"361","fix":"363"},{"desc":"361","fix":"364"},{"desc":"361","fix":"365"},{"desc":"361","fix":"366"},{"desc":"361","fix":"367"},{"desc":"361","fix":"368"},"Update the dependencies array to be: [athleteId]",{"range":"369","text":"370"},{"range":"371","text":"370"},"Update the dependencies array to be: [id]",{"range":"372","text":"373"},{"range":"374","text":"373"},{"range":"375","text":"373"},{"range":"376","text":"373"},{"range":"377","text":"373"},{"range":"378","text":"373"},{"range":"379","text":"373"},[2119,2121],"[athleteId]",[510,512],[1981,1983],"[id]",[4843,4845],[2817,2819],[770,772],[818,820],[914,916],[830,832]]