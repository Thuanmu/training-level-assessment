[{"F:\\ReactJS Project\\training-level-classification\\src\\index.jsx":"1","F:\\ReactJS Project\\training-level-classification\\src\\App.jsx":"2","F:\\ReactJS Project\\training-level-classification\\src\\reportWebVitals.jsx":"3","F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete.js":"4","F:\\ReactJS Project\\training-level-classification\\src\\components\\criteria.jsx":"5","F:\\ReactJS Project\\training-level-classification\\src\\components\\classification-table.jsx":"6","F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete-classification.jsx":"7","F:\\ReactJS Project\\training-level-classification\\src\\components\\rankings.jsx":"8","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\physical.jsx":"9","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\technical .jsx":"10","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\psychophysiology.jsx":"11","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\form.jsx":"12","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header.jsx":"13","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header-components.jsx":"14","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\footer\\footer.jsx":"15","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\index.jsx":"16","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\reportWebVitals.jsx":"17","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\App.jsx":"18","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\header\\header.jsx":"19","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\footer\\footer.jsx":"20","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\header\\header-components.jsx":"21","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete.jsx":"22","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-detail.jsx":"23","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-delete-dialog.jsx":"24","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\psychophysiology-factor-chart.jsx":"25","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\physical-factor-chart.jsx":"26","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-update.jsx":"27","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\form-factor-chart.jsx":"28","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\technical-factor-chart.jsx":"29","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\register\\register.jsx":"30","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\login\\login.jsx":"31","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form.jsx":"32","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-update.jsx":"33","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\profile\\profile-update.jsx":"34","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-delete-dialog.jsx":"35","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-delete-dialog.jsx":"36","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-detail.jsx":"37","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\profile\\profile.jsx":"38","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical.jsx":"39","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-delete-dialog.jsx":"40","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\classification-function\\athlete-classification.jsx":"41","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-detail.jsx":"42","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-detail.jsx":"43","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-update.jsx":"44","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\rankings\\rankings.jsx":"45","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-delete-dialog.jsx":"46","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-update.jsx":"47","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-detail.jsx":"48","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical.jsx":"49","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology.jsx":"50","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-delete-dialog.jsx":"51","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-update.jsx":"52","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-detail.jsx":"53","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-update.jsx":"54","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\routes\\routes.jsx":"55","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\authentication-service.js":"56","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user.jsx":"57","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\psychophysiology-factor-service.js":"58","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\athlete-service.js":"59","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\form-factor-service.js":"60","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\athlete-classification-service.js":"61","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\technical-factor-service.js":"62","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\user-service.js":"63","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\physical-factor-service.js":"64","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\code-generation.js":"65","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\athlete-classification-function.js":"66","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\now-date-time.js":"67"},{"size":829,"mtime":1614403638825,"results":"68","hashOfConfig":"69"},{"size":1255,"mtime":1614195958540,"results":"70","hashOfConfig":"69"},{"size":362,"mtime":1611600649490,"results":"71","hashOfConfig":"69"},{"size":4953,"mtime":1612575581759,"results":"72","hashOfConfig":"69"},{"size":14608,"mtime":1614199264111,"results":"73","hashOfConfig":"69"},{"size":983,"mtime":1614199279727,"results":"74","hashOfConfig":"69"},{"size":1231,"mtime":1614198254186,"results":"75","hashOfConfig":"69"},{"size":1231,"mtime":1614198305794,"results":"76","hashOfConfig":"69"},{"size":2505,"mtime":1614198355473,"results":"77","hashOfConfig":"69"},{"size":1278,"mtime":1614198369267,"results":"78","hashOfConfig":"69"},{"size":1602,"mtime":1614198361826,"results":"79","hashOfConfig":"69"},{"size":1206,"mtime":1614198342796,"results":"80","hashOfConfig":"69"},{"size":2064,"mtime":1614197177230,"results":"81","hashOfConfig":"69"},{"size":543,"mtime":1614225980410,"results":"82","hashOfConfig":"69"},{"size":539,"mtime":1614195737853,"results":"83","hashOfConfig":"69"},{"size":811,"mtime":1623642364461,"results":"84","hashOfConfig":"85"},{"size":362,"mtime":1611600649490,"results":"86","hashOfConfig":"85"},{"size":379,"mtime":1623642364400,"results":"87","hashOfConfig":"85"},{"size":9305,"mtime":1623642364421,"results":"88","hashOfConfig":"85"},{"size":583,"mtime":1623642364414,"results":"89","hashOfConfig":"85"},{"size":1182,"mtime":1624499395624,"results":"90","hashOfConfig":"85"},{"size":10004,"mtime":1624898283707,"results":"91","hashOfConfig":"85"},{"size":3472,"mtime":1623642364598,"results":"92","hashOfConfig":"85"},{"size":3476,"mtime":1624078115891,"results":"93","hashOfConfig":"85"},{"size":9303,"mtime":1624899542113,"results":"94","hashOfConfig":"85"},{"size":13320,"mtime":1624899514284,"results":"95","hashOfConfig":"85"},{"size":9815,"mtime":1623642364621,"results":"96","hashOfConfig":"85"},{"size":6038,"mtime":1624899398208,"results":"97","hashOfConfig":"85"},{"size":7440,"mtime":1624899589043,"results":"98","hashOfConfig":"85"},{"size":7110,"mtime":1624902326969,"results":"99","hashOfConfig":"85"},{"size":4935,"mtime":1624448979859,"results":"100","hashOfConfig":"85"},{"size":7067,"mtime":1624898865381,"results":"101","hashOfConfig":"85"},{"size":9248,"mtime":1624078181551,"results":"102","hashOfConfig":"85"},{"size":10345,"mtime":1624039430728,"results":"103","hashOfConfig":"85"},{"size":2995,"mtime":1624078021703,"results":"104","hashOfConfig":"85"},{"size":2933,"mtime":1624078048075,"results":"105","hashOfConfig":"85"},{"size":3181,"mtime":1623642364763,"results":"106","hashOfConfig":"85"},{"size":4703,"mtime":1623642364546,"results":"107","hashOfConfig":"85"},{"size":9177,"mtime":1624898314721,"results":"108","hashOfConfig":"85"},{"size":3175,"mtime":1624077996707,"results":"109","hashOfConfig":"85"},{"size":9609,"mtime":1624898572683,"results":"110","hashOfConfig":"85"},{"size":4375,"mtime":1623642364962,"results":"111","hashOfConfig":"85"},{"size":5481,"mtime":1623642364895,"results":"112","hashOfConfig":"85"},{"size":16857,"mtime":1624077834370,"results":"113","hashOfConfig":"85"},{"size":7682,"mtime":1624898408112,"results":"114","hashOfConfig":"85"},{"size":2599,"mtime":1624077929889,"results":"115","hashOfConfig":"85"},{"size":13685,"mtime":1624039555090,"results":"116","hashOfConfig":"85"},{"size":4580,"mtime":1623642365082,"results":"117","hashOfConfig":"85"},{"size":7933,"mtime":1624898370343,"results":"118","hashOfConfig":"85"},{"size":8631,"mtime":1624898341568,"results":"119","hashOfConfig":"85"},{"size":3011,"mtime":1624077973716,"results":"120","hashOfConfig":"85"},{"size":12695,"mtime":1624077620698,"results":"121","hashOfConfig":"85"},{"size":3648,"mtime":1623642365028,"results":"122","hashOfConfig":"85"},{"size":10168,"mtime":1624078329723,"results":"123","hashOfConfig":"85"},{"size":6228,"mtime":1623642365149,"results":"124","hashOfConfig":"85"},{"size":1289,"mtime":1623642365151,"results":"125","hashOfConfig":"85"},{"size":6312,"mtime":1624898454361,"results":"126","hashOfConfig":"85"},{"size":2066,"mtime":1624337660933,"results":"127","hashOfConfig":"85"},{"size":1946,"mtime":1624334848574,"results":"128","hashOfConfig":"85"},{"size":1696,"mtime":1624337347928,"results":"129","hashOfConfig":"85"},{"size":2286,"mtime":1624846547088,"results":"130","hashOfConfig":"85"},{"size":1842,"mtime":1624337843118,"results":"131","hashOfConfig":"85"},{"size":1006,"mtime":1624338023454,"results":"132","hashOfConfig":"85"},{"size":1810,"mtime":1624337453461,"results":"133","hashOfConfig":"85"},{"size":641,"mtime":1623642365216,"results":"134","hashOfConfig":"85"},{"size":3358,"mtime":1623727980142,"results":"135","hashOfConfig":"85"},{"size":157,"mtime":1623642365216,"results":"136","hashOfConfig":"85"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},"1rkjdkk",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"140"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"140"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"140"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"140"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"140"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"140"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},"10fh5uu",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"182"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"182"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"182"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"182"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"182"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"182"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"182"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"182"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"182"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"182"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"182"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"182"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"182"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"182"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"182"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"182"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"182"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"182"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"182"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"182"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"182"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"182"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"182"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"F:\\ReactJS Project\\training-level-classification\\src\\index.jsx",["309","310","311","312"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Header from \"./components/layout/header/header\";\nimport Footer from \"./components/layout/footer/footer\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    {/* <Provider> */}\n      <App/>\n    {/* </Provider> */}\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["313","314"],"F:\\ReactJS Project\\training-level-classification\\src\\App.jsx",[],"F:\\ReactJS Project\\training-level-classification\\src\\reportWebVitals.jsx",[],"F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete.js",[],"F:\\ReactJS Project\\training-level-classification\\src\\components\\criteria.jsx",["315"],"import { render } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Col, Form, FormGroup, Input, Label, Row} from \"reactstrap\";\r\nimport Athlete from './athlete';\r\nimport ClassificationTable from \"./classification-table\";\r\nimport { connect } from 'react-redux';\r\n\r\nexport default function Criteria(props) {\r\n\r\n    const [isHide, setIsHide] = useState(false);\r\n    const [numericalOrder, setNumericalOrder] = useState(0);\r\n    // const [athleteId, setAthleteId] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n\r\n    const [timeOfReflectionStart, setTimeOfReflectionStart] = useState('');\r\n    const [thirtyMetersRunAtHighSpeed, setThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [thirtyMetersRunWithLowStart, setThirtyMetersRunWithLowStart] = useState('');\r\n    const [sixtyMetersRunWithLowStart, setSixtyMetersRunWithLowStart] = useState('');\r\n    const [eightyMetersRunWithHighStart, setEightyMetersRunWithHighStart] = useState('');\r\n    const [oneHundredFiftyMetersRunWithHighStart, setOneHundredFiftyMetersRunWithHighStart] = useState('');\r\n    const [runTimeOfLastTwentyMetersInOneHundredMetersRun, setRunTimeOfLastTwentyMetersInOneHundredMetersRun] = useState('');\r\n    const [strengthCoefficient_K, setStrengthCoefficient_K] = useState('');\r\n    const [awayJumpInPlace, setAwayJumpInPlace] = useState('');\r\n    const [threeStepsJumpInPlace, setThreeStepsJumpInPlace] = useState('');\r\n    const [tenStepsJumpInPlace, setTenStepsJumpInPlace] = useState('');\r\n    const [performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed, setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [singleReflectionTime, setSingleReflectionTime] = useState('');\r\n    const [livingCapacityQuotient, setLivingCapacityQuotient] = useState('');\r\n    const [restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun, setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun] = useState('');\r\n    const [lacticAcidContentAfterOneHundredMetersRun, setLacticAcidContentAfterOneHundredMetersRun] = useState('');\r\n    const [thighsRaiseInPlaceForTenSeconds, setThighsRaiseInPlaceForTenSeconds] = useState('');\r\n    const [queteletQuotient, setQueteletQuotient] = useState('');\r\n\r\n    if (isHide) {\r\n      return null;\r\n    }\r\n\r\n    // const handleAthleteId = event => setAthleteId(event.target.value);\r\n    const handleAthleteName = event => setAthleteName(event.target.value);\r\n\r\n    const handleTimeOfReflectionStart = event => setTimeOfReflectionStart(event.target.value);\r\n    const handleThirtyMetersRunAtHighSpeed = event => setThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleThirtyMetersRunWithLowStart = event => setThirtyMetersRunWithLowStart(event.target.value);\r\n    const handleSixtyMetersRunWithLowStart = event => setSixtyMetersRunWithLowStart(event.target.value);\r\n    const handleEightyMetersRunWithHighStart = event => setEightyMetersRunWithHighStart(event.target.value);\r\n    const handleOneHundredFiftyMetersRunWithHighStart = event => setOneHundredFiftyMetersRunWithHighStart(event.target.value);\r\n    const handleRunTimeOfLastTwentyMetersInOneHundredMetersRun = event => setRunTimeOfLastTwentyMetersInOneHundredMetersRun(event.target.value);\r\n    const handleStrengthCoefficient_K = event => setStrengthCoefficient_K(event.target.value);\r\n    const handleAwayJumpInPlace = event => setAwayJumpInPlace(event.target.value);\r\n    const handleThreeStepsJumpInPlace = event => setThreeStepsJumpInPlace(event.target.value);\r\n    const handleTenStepsJumpInPlace = event => setTenStepsJumpInPlace(event.target.value);\r\n    const handlePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed = event => setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleSingleReflectionTime = event => setSingleReflectionTime(event.target.value);\r\n    const handleLivingCapacityQuotient = event => setLivingCapacityQuotient(event.target.value);\r\n    const handleRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun = event => setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(event.target.value);\r\n    const handleLacticAcidContentAfterOneHundredMetersRun = event => setLacticAcidContentAfterOneHundredMetersRun(event.target.value);\r\n    const handleThighsRaiseInPlaceForTenSeconds = event => setThighsRaiseInPlaceForTenSeconds(event.target.value);\r\n    const handleQueteletQuotient = event => setQueteletQuotient(event.target.value);\r\n\r\n    const handleReset = () => {\r\n      // setAthleteId(\"\");\r\n      setAthleteName(\"\");\r\n      setTimeOfReflectionStart(\"\");\r\n      setThirtyMetersRunAtHighSpeed(\"\");\r\n      setThirtyMetersRunWithLowStart(\"\");\r\n      setSixtyMetersRunWithLowStart(\"\");\r\n      setEightyMetersRunWithHighStart(\"\");\r\n      setOneHundredFiftyMetersRunWithHighStart(\"\");\r\n      setRunTimeOfLastTwentyMetersInOneHundredMetersRun(\"\");\r\n      setStrengthCoefficient_K(\"\");\r\n      setAwayJumpInPlace(\"\");\r\n      setThreeStepsJumpInPlace(\"\");\r\n      setTenStepsJumpInPlace(\"\");\r\n      setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(\"\");\r\n      setSingleReflectionTime(\"\");\r\n      setLivingCapacityQuotient(\"\");\r\n      setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(\"\");\r\n      setLacticAcidContentAfterOneHundredMetersRun(\"\");\r\n      setThighsRaiseInPlaceForTenSeconds(\"\");\r\n      setQueteletQuotient(\"\");\r\n    } \r\n\r\n    const {athletesCount} = props;\r\n    var newAthletesList =  [];\r\n    localStorage.removeItem(\"newAthletesList\");\r\n\r\n    const handleNext = () => {\r\n      var temp =  document.getElementsByName(\"criteria\");\r\n      var criterias = [];\r\n      for (var i = 0; i < temp.length; i++) {\r\n        criterias.push(temp[i].value);\r\n      }\r\n      newAthletesList[numericalOrder] = {name: athleteName, totalScoresOfCriterias: 0, grade: null, rank: null, criteriasList: criterias};\r\n      localStorage.setItem(`newAthletesList[${numericalOrder}]`, JSON.stringify(newAthletesList[numericalOrder]));\r\n      if (numericalOrder < athletesCount - 1) setNumericalOrder(numericalOrder + 1);\r\n      handleReset();\r\n    }\r\n\r\n    const handleClassify = () => {\r\n      handleNext();\r\n      for (let i = 0; i < athletesCount; i++) {\r\n        newAthletesList[i] = JSON.parse(localStorage.getItem(`newAthletesList[${i}]`));\r\n      }\r\n      localStorage.setItem(\"newAthletesList\", JSON.stringify(newAthletesList));\r\n      Athlete.classifyTrainingLevel();\r\n      let athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n      for (let i = 0; i < newAthletesList.length; i++) {\r\n        for (let j = 0; j < athletesList.length; j++) {\r\n          if (newAthletesList[i].name === athletesList[j].name) {\r\n            newAthletesList[i].totalScoresOfCriterias = athletesList[j].totalScoresOfCriterias;\r\n            newAthletesList[i].grade = athletesList[j].grade;\r\n            newAthletesList[i].rank = athletesList[j].rank;\r\n          }\r\n        }\r\n      }\r\n      setIsHide(true);\r\n      render(<ClassificationTable newAthletesList={newAthletesList}/>)\r\n    }\r\n\r\n    var button;\r\n    if (numericalOrder < athletesCount - 1) {\r\n      button = <Button id=\"btn-next\" size=\"sm\" onClick={handleNext} >Tiếp theo</Button>; \r\n    }\r\n    else button = <Button id=\"btn-classify\" size=\"sm\" onClick={handleClassify} >Phân loại</Button>;\r\n\r\n      return (\r\n        <div className=\"padding-title-title\">\r\n          <h2>Vận động viên thứ {numericalOrder + 1}</h2>\r\n          &nbsp;\r\n          <Form className=\"athlete-criteria\">\r\n            <FormGroup>\r\n              <Row className=\"athlete-info\">\r\n                <Col md=\"6\">\r\n                  <Label for=\"athlete-name\">Tên vận động viên</Label>\r\n                  <Input type=\"text\" id=\"athlete-name\" name=\"athlete-name\" value={athleteName} onChange={handleAthleteName} />\r\n                </Col>\r\n              </Row>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-time-of-reflection-start\">1. Thời gian phản xạ xuất phát (s)</Label>\r\n              <Input type=\"text\" id=\"time-of-reflection-start\" name=\"criteria\" value={timeOfReflectionStart} onChange={handleTimeOfReflectionStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thirty-meters-run-at-high-speed\">2. Chạy 30m tốc độ cao (s)</Label>\r\n              <Input type=\"text\" id=\"thirty-meters-run-at-high-speed\" name=\"criteria\" value={thirtyMetersRunAtHighSpeed} onChange={handleThirtyMetersRunAtHighSpeed} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thirty-meters-run-with-low-start\">3. Chạy 30m xuất phát thấp (s)</Label>\r\n              <Input type=\"text\" id=\"thirty-meters-run-with-low-start\" name=\"criteria\" value={thirtyMetersRunWithLowStart} onChange={handleThirtyMetersRunWithLowStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-sixty-meters-run-with-low-start\">4. Chạy 60m xuất phát thấp (s)</Label>\r\n              <Input type=\"text\" id=\"sixty-meters-run-with-low-start\" name=\"criteria\" value={sixtyMetersRunWithLowStart} onChange={handleSixtyMetersRunWithLowStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-eighty-meters-run-with-high-start\">5. Chạy 80m xuất phát cao (s)</Label>\r\n              <Input type=\"text\" id=\"eighty-meters-run-with-high-start\" name=\"criteria\" value={eightyMetersRunWithHighStart} onChange={handleEightyMetersRunWithHighStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-one-hundred-fifty-meters-run-with-high-start\">6. Chạy 150m xuất phát cao (s)</Label>\r\n              <Input type=\"text\" id=\"one-hundred-fifty-meters-run-with-high-start\" name=\"criteria\" value={oneHundredFiftyMetersRunWithHighStart} onChange={handleOneHundredFiftyMetersRunWithHighStart} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-away-jump-in-place\">7. Bật xa tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"away-jump-in-place\" name=\"criteria\" value={awayJumpInPlace} onChange={handleAwayJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"three-steps-jump-in-place\">8. Bật 3 bước tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"three-steps-jump-in-place\" name=\"criteria\" value={threeStepsJumpInPlace} onChange={handleThreeStepsJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-ten-steps-jump-in-place\">9. Bật 10 bước tại chỗ (m)</Label>\r\n              <Input type=\"text\" id=\"ten-steps-jump-in-place\" name=\"criteria\" value={tenStepsJumpInPlace} onChange={handleTenStepsJumpInPlace} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-run-time-of-last-twenty-meters-in-one-hundred-meters-run\">10. Thời gian của 20m cuối trong chạy 100m (s)</Label>\r\n              <Input type=\"text\" id=\"run-time-of-last-twenty-meters-in-one-hundred-meters-run\" name=\"criteria\" value={runTimeOfLastTwentyMetersInOneHundredMetersRun} onChange={handleRunTimeOfLastTwentyMetersInOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-strength-coefficient-K\">11. Hệ số sức bền K (s)</Label>\r\n              <Input type=\"text\" id=\"strength-coefficient-K\" name=\"criteria\" value={strengthCoefficient_K} onChange={handleStrengthCoefficient_K} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-thighs-raise-in-place-for-ten-seconds\">12. Nâng cao đùi tại chỗ 10s (lần)</Label>\r\n              <Input type=\"text\" id=\"thighs-raise-in-place-for-ten-seconds\" name=\"criteria\" value={lacticAcidContentAfterOneHundredMetersRun} onChange={handleLacticAcidContentAfterOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-performance-difference-between-thirty-meters-run-with-low-start-and-thirty-meters-run-at-high-speed\">13. Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</Label>\r\n              <Input type=\"text\" id=\"performance-difference-between-thirty-meters-run-with-low-start-and-thirty-meters-run-at-high-speed\" name=\"criteria\" value={performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} onChange={handlePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-single-reflection-time\">14. Thời gian phản xạ đơn (s)</Label>\r\n              <Input type=\"text\" id=\"single-reflection-time\" name=\"criteria\" value={singleReflectionTime} onChange={handleSingleReflectionTime} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-living-capacity-quotient\">15. Chỉ số dung tích sống (ml/kg)</Label>\r\n              <Input type=\"text\" id=\"living-capacity-quotient\" name=\"criteria\" value={livingCapacityQuotient} onChange={handleLivingCapacityQuotient} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\">16. Tần số tim hồi phục 30s sau chạy 100m (lần/phút)</Label>\r\n              <Input type=\"text\" id=\"restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\" name=\"criteria\" value={restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} onChange={handleRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-lactic-acid-content-after-one-hundred-meters-run\">17. Hàm lượng axit lactic sau chạy 100m (mmol/lít)</Label>\r\n              <Input type=\"text\" id=\"lactic-acid-content-after-one-hundred-meters-run\" name=\"criteria\" value={thighsRaiseInPlaceForTenSeconds} onChange={handleThighsRaiseInPlaceForTenSeconds} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"criteria-quetelet-quotient\">18. Chỉ số Quetelet (g/cm)</Label>\r\n              <Input type=\"text\" id=\"quetelet-quotient\" name=\"criteria\" value={queteletQuotient} onChange={handleQueteletQuotient} />\r\n            </FormGroup>\r\n            {button}\r\n          </Form>\r\n      </div>\r\n      );\r\n\r\n}\r\n\r\n","F:\\ReactJS Project\\training-level-classification\\src\\components\\classification-table.jsx",[],["316","317"],"F:\\ReactJS Project\\training-level-classification\\src\\components\\athlete-classification.jsx",["318"],"import React, { useState } from \"react\";\r\nimport { render } from \"@testing-library/react\";\r\nimport { Button, Container, Form, Input, Label } from \"reactstrap\";\r\n\r\nimport Criteria from './criteria';\r\n\r\nexport default function AthleteClassification(props) {\r\n\r\n    const [isHide, setIsHide] = useState(false);\r\n    const [athletesCount, setAthletesCount] = useState('');\r\n\r\n    if (isHide) {\r\n      return null;\r\n    }\r\n\r\n    const handleAthletesCount = event => setAthletesCount(event.target.value);\r\n\r\n    const handleNext = () => {\r\n        localStorage.setItem(\"athletesCount\", JSON.stringify(athletesCount));\r\n        setIsHide(true);\r\n        render(<Criteria athletesCount={athletesCount}/>);\r\n    }\r\n    \r\n    return (\r\n      <div className=\"padding-title\">\r\n        <h2>Phân loại trình độ tập luyện của các VĐV chạy 100m cấp cao</h2>\r\n        &nbsp;\r\n          <Form className=\"athlete-count\">\r\n            <Label>Số vận động viên</Label>\r\n            <Input type=\"text\" name=\"athletes-count\" value={athletesCount} onChange={handleAthletesCount} />\r\n            <Button id=\"btn-next\" color=\"info\" size=\"sm\" onClick={handleNext} >Tiếp theo</Button>\r\n          </Form>\r\n      </div>\r\n    );\r\n}\r\n\r\n","F:\\ReactJS Project\\training-level-classification\\src\\components\\rankings.jsx",["319"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Rankings(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Bảng xếp hạng trình độ tập luyện</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Tổng điểm</th>\r\n                <th>Xếp loại</th>\r\n                <th>Xếp hạng</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.totalScoresOfCriterias}</td>\r\n                  <td>{athlete.grade}</td>\r\n                  <td>{athlete.rank}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\physical.jsx",["320"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Physical(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố thể lực</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Thời gian phản xạ xuất phát (s)</th>\r\n                <th>Chạy 30m tốc độ cao (s)</th>\r\n                <th>Chạy 30m xuất phát thấp (s)</th>\r\n                <th>Chạy 60m xuất phát thấp (s)</th>\r\n                <th>Chạy 80m xuất phát cao (s)</th>\r\n                <th>Chạy 150m xuất phát cao (s)</th>\r\n                <th>Bật xa tại chỗ (m)</th>\r\n                <th>Bật 3 bước tại chỗ (m)</th>\r\n                <th>Bật 10 bước tại chỗ (m)</th>\r\n                <th>Thời gian chạy 20m cuối trong chạy 100m (s)</th>\r\n                <th>Hệ số sức bền K (s)</th>\r\n                <th>Nâng cao đùi tại chỗ 10s (lần)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[0]}</td>\r\n                  <td>{athlete.criteriasList[1]}</td>\r\n                  <td>{athlete.criteriasList[2]}</td>\r\n                  <td>{athlete.criteriasList[3]}</td>\r\n                  <td>{athlete.criteriasList[4]}</td>\r\n                  <td>{athlete.criteriasList[5]}</td>\r\n                  <td>{athlete.criteriasList[6]}</td>\r\n                  <td>{athlete.criteriasList[7]}</td>\r\n                  <td>{athlete.criteriasList[8]}</td>\r\n                  <td>{athlete.criteriasList[9]}</td>\r\n                  <td>{athlete.criteriasList[10]}</td>\r\n                  <td>{athlete.criteriasList[11]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\technical .jsx",["321"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Technical(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố kỹ thuật</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[12]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\psychophysiology.jsx",["322"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Psychophysiology(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố tâm-sinh lý</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Phản xạ đơn (s)</th>\r\n                <th>Chỉ số dung tích sống (ml/kg)</th>\r\n                <th>Tần số tim hồi phục 30s sau chạy 100m (lần/ph)</th>\r\n                <th>Hàm lượng LA sau chạy 100m (mmol/lít)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[13]}</td>\r\n                  <td>{athlete.criteriasList[14]}</td>\r\n                  <td>{athlete.criteriasList[15]}</td>\r\n                  <td>{athlete.criteriasList[16]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\factors\\form.jsx",["323"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default function Form(props) {\r\n\r\n    const athletesList = JSON.parse(localStorage.getItem(\"athletesList\"));\r\n    // const {athletesList} = props;\r\n    return(\r\n        <div className=\"padding-title\">\r\n        <h2>Yếu tố hình thái</h2>\r\n        <Container className=\"container-border\">\r\n          <Table className=\"table\" hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Số thứ tự</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Chỉ số Quetelet (g/cm)</th>\r\n                <th>Ngày tạo</th>\r\n                <th>Cập nhật lần cuối</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {athletesList.map((athlete, i) => (\r\n                <tr>\r\n                  <td>{i + 1}</td>\r\n                  <td>{athlete.name}</td>\r\n                  <td>{athlete.criteriasList[17]}</td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header.jsx",["324","325","326","327","328","329"],"import React, { useState } from \"react\";\r\nimport { Col, Collapse, DropdownItem, DropdownMenu, DropdownToggle, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink, Row, UncontrolledButtonDropdown, UncontrolledDropdown } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport {Brand, Home} from './header-components';\r\nimport \"./header.css\";\r\n\r\nexport default function Header(props) {\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n    const toggleMenu = () => setMenuOpen(!menuOpen);\r\n\r\n    return(\r\n        <div className=\"header\">\r\n            <Navbar color=\"dark\" fixed=\"top\" expand=\"md\">\r\n                <NavbarToggler aria-label=\"Menu\" onClick={toggleMenu} />\r\n                <Brand/>\r\n                <Collapse isOpen={menuOpen} navbar>\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <NavLink href=\"/\">Trang chủ</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Yếu tố</DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem href=\"/physical\">Thể lực</DropdownItem>\r\n                                <DropdownItem href=\"/technical\">Kỹ thuật</DropdownItem>\r\n                                <DropdownItem href=\"/psychophysiology\">Tâm-sinh lý</DropdownItem>\r\n                                <DropdownItem href=\"/form\">Hình thái</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink href=\"/athlete-classification\">Phân loại trình độ tập luyện</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/rankings\">Bảng xếp hạng</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\header\\header-components.jsx",["330","331","332","333","334"],"import React from \"react\";\r\nimport { Col, NavbarBrand, NavItem, NavLink, Row } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\n\r\nexport const Brand = props => (\r\n    <NavbarBrand href=\"/\" className=\"brand-logo\">\r\n      <span className=\"brand-title\">TrainingLevel100m</span>\r\n    </NavbarBrand>\r\n  );\r\n\r\nexport const Home = props => (\r\n    <div className=\"padding-title\">\r\n        <h2>Chào mừng đến với trang web đánh giá trình độ tập luyện của các VĐV chạy 100m cấp cao </h2>\r\n    </div>\r\n);","F:\\ReactJS Project\\training-level-classification\\src\\components\\layout\\footer\\footer.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\index.jsx",["335","336"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import 'react-notifications/lib/notifications.css';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    {/* <Provider> */}\r\n      <App/>\r\n    {/* </Provider> */}\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n",["337","338"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\reportWebVitals.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\App.jsx",["339","340"],"import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nimport AthleteClassification from \"./components/athlete-classification\";\r\nimport Form from \"./components/factors/form\";\r\nimport Physical from \"./components/factors/physical\";\r\nimport Psychophysiology from \"./components/factors/psychophysiology\";\r\nimport Technical from \"./components/factors/technical \";\r\nimport Footer from \"./components/layout/footer/footer\";\r\nimport Header from \"./components/layout/header/header\";\r\nimport { Home } from \"./components/layout/header/header-components\";\r\nimport Rankings from \"./components/rankings\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Route path=\"/athlete-classification\" component={AthleteClassification} exact />\r\n        <Route path=\"/rankings\" component={Rankings} exact />\r\n        <Route path=\"/physical\" component={Physical} exact />\r\n        <Route path=\"/technical\" component={Technical} exact />\r\n        <Route path=\"/psychophysiology\" component={Psychophysiology} exact />\r\n        <Route path=\"/form\" component={Form} exact />\r\n        <Route component={Error} />\r\n      </Switch>\r\n      <Footer/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\header\\header.jsx",["341","342","343","344","345","346","347","348","349"],"import React, { useEffect, useState } from \"react\";\r\nimport { Collapse, DropdownItem, DropdownMenu, DropdownToggle, Nav, Navbar, NavbarToggler, NavItem, NavLink, Row, UncontrolledButtonDropdown, UncontrolledDropdown } from \"reactstrap\";\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport {Brand, Home} from './header-components';\r\nimport \"./header.css\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAsterisk, faCalculator, faChartBar, faChartLine, faHome, faList, faPoll, faRegistered, faRunning, faSignInAlt, faSignOutAlt, faTasks, faThList, faUser, faUserCircle, faUserCog, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function Header(props) {\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    const toggleMenu = () => setMenuOpen(!menuOpen);\r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n    }, []);\r\n\r\n    const logOut = () => {\r\n        AuthenticationService.logout();\r\n      };\r\n\r\n    return(\r\n        <div className=\"header\">\r\n            <Navbar color=\"dark\" fixed=\"top\" expand=\"md\">\r\n                <NavbarToggler aria-label=\"Menu\" onClick={toggleMenu} />\r\n                <Brand/>\r\n                <Collapse isOpen={menuOpen} navbar>\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav\" href=\"/\">\r\n                                <FontAwesomeIcon icon={faHome}/>\r\n                                &nbsp;\r\n                                <span>Trang chủ</span>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        {!currentUser || (currentUser && (currentUser.roles.includes(\"ROLE_COACH\") || currentUser.roles.includes(\"ROLE_ATHLETE\"))) ? (\r\n                            <NavItem>\r\n                                <NavLink className=\"nav\" href=\"/athletes\">\r\n                                    <FontAwesomeIcon icon={faRunning}/>\r\n                                    &nbsp;\r\n                                    <span>Vận động viên</span>\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {!currentUser || (currentUser && (currentUser.roles.includes(\"ROLE_COACH\") || currentUser.roles.includes(\"ROLE_ATHLETE\"))) ? (\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle className=\"nav\" nav caret>\r\n                                    <FontAwesomeIcon icon={faThList}/>\r\n                                    &nbsp;\r\n                                    <span>Yếu tố</span>\r\n                                </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem href=\"/physicalFactors\">\r\n                                            {/* <FontAwesomeIcon icon={faAsterisk}/>\r\n                                            &nbsp; */}\r\n                                            <span>Thể lực</span>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem href=\"/technicalFactors\">Kỹ thuật</DropdownItem>\r\n                                        <DropdownItem href=\"/psychophysiologyFactors\">Tâm-sinh lý</DropdownItem>\r\n                                        <DropdownItem href=\"/formFactors\">Hình thái</DropdownItem>\r\n                                    </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {!currentUser || (currentUser && currentUser.roles.includes(\"ROLE_COACH\")) ? (\r\n                            <NavItem>\r\n                                <NavLink className=\"nav\" href=\"/athlete-classification\">\r\n                                    {/* <FontAwesomeIcon icon={faTasks}/> */}\r\n                                    <FontAwesomeIcon icon={faCalculator}/>\r\n                                    &nbsp;\r\n                                    <span>Phân loại trình độ tập luyện</span>\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {!currentUser || (currentUser && (currentUser.roles.includes(\"ROLE_COACH\") || currentUser.roles.includes(\"ROLE_ATHLETE\"))) ? (\r\n                            <NavItem>\r\n                                <NavLink className=\"nav\" href=\"/rankingsList\">\r\n                                    <FontAwesomeIcon icon={faPoll}/>\r\n                                    &nbsp;\r\n                                    <span>Bảng xếp hạng</span>\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {!currentUser || (currentUser && (currentUser.roles.includes(\"ROLE_COACH\") || currentUser.roles.includes(\"ROLE_ATHLETE\"))) ? (\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle className=\"nav\" nav caret>\r\n                                    <FontAwesomeIcon icon={faChartLine}/>\r\n                                    &nbsp;\r\n                                    <span>Biểu đồ</span>\r\n                                </DropdownToggle>\r\n                                <DropdownMenu right>\r\n                                    <DropdownItem href=\"/physicalFactorChart\">Yếu tố thể lực</DropdownItem>\r\n                                    <DropdownItem href=\"/technicalFactorChart\">Yếu tố kỹ thuật</DropdownItem>\r\n                                    <DropdownItem href=\"/psychophysiologyFactorChart\">Yếu tố tâm-sinh lý</DropdownItem>\r\n                                    <DropdownItem href=\"/formFactorChart\">Yếu tố hình thái</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        {currentUser && currentUser.roles.includes(\"ROLE_ADMIN\") ? (\r\n                            <NavItem>\r\n                                <NavLink className=\"nav\" href=\"/users\">\r\n                                    <FontAwesomeIcon icon={faUserCog}/>\r\n                                    &nbsp;\r\n                                    <span>Quản lý người dùng</span>\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle className=\"nav\" nav caret>\r\n                                <FontAwesomeIcon icon={faUser}/>\r\n                                &nbsp;\r\n                                <span>Tài khoản</span>\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                {currentUser ? (\r\n                                    <div>\r\n                                        <DropdownItem href={`/profile/${currentUser.id}`}>\r\n                                            <FontAwesomeIcon icon={faUserCircle}/>\r\n                                            &nbsp;\r\n                                            <span>Hồ sơ cá nhân</span>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem href=\"/login\" onClick={logOut}>\r\n                                            <FontAwesomeIcon icon={faSignOutAlt}/>\r\n                                            &nbsp;\r\n                                            <span>Đăng xuất</span>\r\n                                        </DropdownItem>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div>\r\n                                        <DropdownItem href=\"/login\">\r\n                                            <FontAwesomeIcon icon={faSignInAlt}/>\r\n                                            &nbsp;\r\n                                            <span>Đăng nhập</span>\r\n                                        </DropdownItem>\r\n                                        <DropdownItem href=\"/register\">\r\n                                            <FontAwesomeIcon icon={faUserPlus}/>\r\n                                            &nbsp;\r\n                                            <span>Đăng ký</span>\r\n                                        </DropdownItem>\r\n                                    </div>\r\n                                )}\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\footer\\footer.jsx",["350"],"import React from \"react\";\r\nimport { CardFooter, Col, Row } from \"reactstrap\";\r\nimport \"./footer.css\";\r\n\r\n\r\nexport default function Footer(props) {\r\n    return(\r\n     \r\n     <div className=\"footer\">\r\n        &nbsp;\r\n        <Row>\r\n            <Col md=\"2\">TrainingLevel © 2021.</Col>\r\n            <Col md=\"8\"></Col>\r\n            <Col md=\"2\">\r\n                <p>\r\n                    Powered by\r\n                    &nbsp;\r\n                    <a href={\"https://www.facebook.com/thuanmu\"}>ThuanPV</a>\r\n                </p>\r\n            </Col>\r\n        </Row> \r\n     </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\components\\layouts\\header\\header-components.jsx",["351","352","353"],"import React from \"react\";\r\nimport { Container, NavbarBrand, NavLink, Row, Alert } from \"reactstrap\";\r\nimport { NavLink as Link } from \"react-router-dom\";\r\n\r\nexport const BrandIcon = (props) => (\r\n  <div {...props} className=\"brand-icon\">\r\n    <img\r\n      src=\"../../../assets/images/TrainingLevel2.png\"\r\n      alt=\"Logo\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport const Brand = (props) => (\r\n  <NavbarBrand href=\"/\" className=\"brand-logo\">\r\n    <span className=\"brand-title\">TrainingLevel</span>\r\n  </NavbarBrand>\r\n);\r\n\r\nexport const Home = (props) => (\r\n  <div>\r\n    <Container fluid>\r\n      <Alert color=\"primary\">\r\n        <h2>Hệ thống đánh giá trình độ tập luyện của vận động viên thể thao</h2>\r\n        &nbsp;\r\n        <ul id=\"home-list\">\r\n          <li>Phân loại vận động viên</li>\r\n          <li>Xem bảng xếp hạng vận động viên</li>\r\n          <li>Xem biểu đồ biểu diễn các yếu tố</li>\r\n          <li>Quản lý các vận động viên</li>\r\n          <li>Quản lý các yếu tố của các vận động viên</li>\r\n        </ul>\r\n      </Alert>\r\n    </Container>\r\n  </div>\r\n);\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete.jsx",["354","355","356"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-detail.jsx",["357","358"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AthleteService from '../../services/athlete-service';\r\nimport AuthenticationService from \"../../services/authentication-service\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faArrowCircleLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nexport default function AthleteDetail(props) {\r\n\r\n    const [athleteId, setAthleteId] = useState(props.match.params.id);\r\n    const [athlete, setAthlete] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n    \r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        AthleteService.getAthleteById(athleteId).then( res => {\r\n            setAthlete(res.data);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết vận động viên</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>Mã vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athlete.athleteCode}</dd>\r\n                    <dt>\r\n                        <span>Tên vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athlete.athleteName}</dd>\r\n                    <dt>\r\n                        <span>Ngày sinh</span>\r\n                    </dt>\r\n                    <dd>{athlete.dateOfBirth}</dd>\r\n                    <dt>\r\n                        <span>Giới tính</span>\r\n                    </dt>\r\n                    <dd>{athlete.gender === 0 ? \"Nam\" : \"Nữ\"}</dd>\r\n                    <dt>\r\n                        <span>Quê quán</span>\r\n                    </dt>\r\n                    <dd>{athlete.hometown}</dd>\r\n                    <dt>\r\n                        <span>Tổng điểm</span>\r\n                    </dt>\r\n                    <dd>{athlete.totalScoresOfCriterias}</dd>\r\n                    <dt>\r\n                        <span>Xếp loại</span>\r\n                    </dt>\r\n                    <dd>{athlete.grade}</dd>\r\n                    <dt>\r\n                        <span>Xếp hạng</span>\r\n                    </dt>\r\n                    <dd>{athlete.athleteRank}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{athlete.createAt}</dd>\r\n                    <dt>\r\n                        <span>Ngày cập nhật</span>\r\n                    </dt>\r\n                    <dd>{athlete.lastModified}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_COACH\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/athletes/${athlete.id}/edit`} >\r\n                          <FontAwesomeIcon icon={faEdit}/>\r\n                          &nbsp;\r\n                          <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/athletes\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-delete-dialog.jsx",["359","360","361"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport AthleteService from \"../../services/athlete-service\";\r\n// import {NotificationContainer, NotificationManager} from 'react-notifications';\r\n\r\nexport const AthleteDeleteDialog = (props) => {\r\n  const [athleteId, setAthleteId] = useState(props.match.params.id);\r\n  const [athlete, setAthlete] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/athletes`);\r\n  };\r\n\r\n  const deleteAthlete = () => {\r\n    handleOpen();\r\n\r\n    AthleteService.deleteAthlete(athleteId).then(\r\n      (response) => {\r\n        if (response.data.message === \"Athlete has been deleted!\") {\r\n          setSuccess(true);\r\n          setMessage(\"Vận động viên đã được xóa!\");\r\n        }\r\n        \r\n        // NotificationManager.success(response.data.message, null, 3000);\r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          handleClose();\r\n        }, 2000);\r\n      },\r\n\r\n      (error) => {\r\n        const ResMessage =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n\r\n        if (ResMessage === \"Error: You can't delete an athlete with factors added!\") {\r\n          setMessage(\"Bạn không thể xóa vận động viên đã thêm các yếu tố\");\r\n        }\r\n        // NotificationManager.error(ResMessage, null, 3000);\r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          handleClose();\r\n        }, 2000);\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    AthleteService.getAthleteById(athleteId).then((res) => {\r\n      setAthlete(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* <NotificationContainer/> */}\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa vận động viên này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deleteAthlete}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\psychophysiology-factor-chart.jsx",["362"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\physical-factor-chart.jsx",["363"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\athlete\\athlete-update.jsx",["364"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Button, Container, Form, FormGroup, Input, Label, Row} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport AthleteService from '../../services/athlete-service';\r\nimport moment from \"moment\";\r\nimport CodeGeneration from \"../../utils/code-generation\";\r\nimport AuthenticationService from \"../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function AthleteUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [athleteId, setAthleteId] = useState(props.match.params.id);\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [dateOfBirth, setDateOfBirth] = useState('');\r\n    const [gender, setGender] = useState('');\r\n    const [hometown, setHometown] = useState('');\r\n    const [totalScoresOfCriterias, setTotalScoresOfCriterias] = useState('');\r\n    const [grade, setGrade] = useState('');\r\n    const [athleteRank, setAthleteRank] = useState('');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n    const handleAthleteName = event => setAthleteName(event.target.value);\r\n    const handleDateOfBirth = event => setDateOfBirth(event.target.value);\r\n    const handleGender = value => setGender(value);\r\n    const handleHometown = event => setHometown(event.target.value);\r\n    const handleTotalScoresOfCriterias = event => setTotalScoresOfCriterias(event.target.value);\r\n    const handleGrade = event => setGrade(event.target.value);\r\n    const handleAthleteRank = event => setAthleteRank(event.target.value);\r\n    \r\n    useEffect(() => {\r\n        if(athleteId)  {\r\n            AthleteService.getAthleteById(athleteId).then( res => {\r\n                let athlete = res.data;\r\n                setAthleteId(athlete.id);\r\n                setAthleteCode(athlete.athleteCode);\r\n                setAthleteName(athlete.athleteName);\r\n                setDateOfBirth(athlete.dateOfBirth);\r\n                setGender(athlete.gender);\r\n                setHometown(athlete.hometown);\r\n                setTotalScoresOfCriterias(athlete.totalScoresOfCriterias);\r\n                setGrade(athlete.grade);\r\n                setAthleteRank(athlete.athleteRank);\r\n                setCreateAt(athlete.createAt);\r\n                setLastModified(athlete.lastModified);\r\n            });\r\n        }\r\n\r\n        AthleteService.getAllAthletes().then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let user = AuthenticationService.getCurrentUser();\r\n        let code = CodeGeneration.generateCode('AT', athletes.length > 0 ? athletes[athletes.length - 1].athleteCode.substring(2) : \"00000\", false);\r\n        // document.write(JSON.stringify(athletes));\r\n        let athlete = {\r\n            id: athleteId,\r\n            athleteCode: athleteId ? athleteCode : code,\r\n            athleteName: athleteName,\r\n            dateOfBirth: athleteId ? dateOfBirth : moment(dateOfBirth).format(\"DD-MM-YYYY\"),\r\n            gender: gender,\r\n            hometown: hometown,\r\n            totalScoresOfCriterias: totalScoresOfCriterias,\r\n            grade: grade,\r\n            athleteRank: athleteRank,\r\n            user: {id : user.id}\r\n        };\r\n    \r\n        if(!athleteId) {\r\n            AthleteService.createAthlete(athlete).then(\r\n                (response) => {\r\n                    if (response.data.message === \"Athlete have been added!\") {\r\n                        setMessage(\"Vận động viên đã được thêm!\");\r\n                    }\r\n                    setSuccess(true);\r\n                    setTimeout(() => {\r\n                        setVisible(false);\r\n                        props.history.push('/athletes');\r\n                    }, 2000);\r\n                }\r\n            );\r\n        } \r\n        else {\r\n            AthleteService.updateAthlete(athlete, athleteId).then(\r\n                (response) => {\r\n                    if (response.data.message === \"Athlete have been edited!\") {\r\n                        setMessage(\"Vận động viên đã được chỉnh sửa!\");\r\n                    }\r\n                    setSuccess(true);\r\n                    setTimeout(() => {\r\n                        setVisible(false);\r\n                        props.history.push('/athletes');\r\n                    }, 2000);\r\n                }\r\n            );\r\n        }\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    \r\n    const title = <h2>{ athleteId ? \"Sửa vận động viên\" : \"Thêm vận động viên\" }</h2>;\r\n            \r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n             {!success && (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {athleteId ? (\r\n                        <FormGroup>\r\n                            <Label for=\"code\">Mã vận động viên</Label>\r\n                            <Input type=\"text\" name=\"code\" id=\"code\" value={athleteCode} readOnly={athleteId ? true : false}/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-name\">Tên vận động viên</Label>\r\n                        <Input type=\"text\"  name=\"athlete-name\" id=\"athlete-name\" value={athleteName} onChange={handleAthleteName} required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"date-of-birth\">Ngày sinh</Label>\r\n                        <Input type={athleteId ? \"text\" : \"date\"} name=\"date-of-birth\" id=\"date-of-birth\" value={dateOfBirth} onChange={handleDateOfBirth} required/>\r\n                    </FormGroup>\r\n                    <FormGroup tag=\"fieldset\">\r\n                        <Row>\r\n                            <Label md=\"2\">Giới tính</Label>\r\n                        </Row>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 0 ? true : false} onChange={() => handleGender(0)} required/>{' '}\r\n                                    Nam\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 1 ? true : false} onChange={() => handleGender(1)} required/>{' '}\r\n                                    Nữ\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"home-town\">Quê quán</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={hometown} onChange={handleHometown} required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"total-scores-of-criterias\">Tổng điểm</Label>\r\n                        <Input type=\"text\" name=\"total-scores-of-criterias\" id=\"total-scores-of-criterias\" value={totalScoresOfCriterias} onChange={handleTotalScoresOfCriterias} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"grade\">Xếp loại</Label>\r\n                        <Input type=\"text\" name=\"grade\" id=\"grade\" value={grade} onChange={handleGrade} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-rank\">Xếp hạng</Label>\r\n                        <Input type=\"text\" name=\"athlete-rank\" id=\"athlete-rank\" value={athleteRank} onChange={handleAthleteRank} readOnly />\r\n                    </FormGroup>\r\n                    {athleteId ? (\r\n                        <div>\r\n                            <FormGroup>\r\n                                <Label for=\"create-at\">Ngày tạo</Label>\r\n                                <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"lastModified\">Ngày cập nhật</Label>\r\n                                <Input type=\"text\" name=\"lastModified\" id=\"lastModified\" value={lastModified} readOnly/>\r\n                            </FormGroup>\r\n                        </div>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/athletes\">\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n             )}\r\n             <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                {message}\r\n             </Alert>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\form-factor-chart.jsx",["365"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\charts\\technical-factor-chart.jsx",["366"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\register\\register.jsx",["367","368"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\login\\login.jsx",["369","370","371","372","373","374","375","376"],"import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Spinner,\r\n} from \"reactstrap\";\r\n\r\nexport default function Login(props) {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleChangeUsername = (event) => setUsername(event.target.value);\r\n  const handleChangePassword = (event) => setPassword(event.target.value);\r\n\r\n  const required = (value) => {\r\n    if (!value) {\r\n      return (\r\n        <div>\r\n          <Alert color=\"danger\">Thông tin này là bắt buộc</Alert>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleLogin = (event) => {\r\n    event.preventDefault();\r\n\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      AuthenticationService.login(username, password).then(\r\n        (response) => {\r\n          if (response.data !== null) {\r\n            setMessage(\"Đăng nhập thành công!\");\r\n          }\r\n\r\n          setLoading(false);\r\n          setSuccess(true);\r\n          // if (response.data.code === 401) {\r\n          //   setMessage(\"Tài khoản hoặc mật khẩu đăng nhập không hợp lệ!\");\r\n          // }\r\n          setTimeout(() => {\r\n            props.history.push(\"/\");\r\n            window.location.reload();\r\n          }, 2000);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          if (resMessage === \"Request failed with status code 401\") {\r\n            setMessage(\"Tài khoản hoặc mật khẩu không đúng!\");\r\n          }\r\n          if (resMessage === \"Error: User has been locked!\") {\r\n            setMessage(\"Tài khoản này đã bị khóa!\");\r\n          }\r\n    \r\n          setLoading(false);\r\n        }\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container id=\"login-container\">\r\n        <h2>Đăng nhập</h2>\r\n        <Form onSubmit={handleLogin} ref={form}>\r\n          {!success && (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <Label>Tên tài khoản</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  onChange={handleChangeUsername}\r\n                  placeholder=\"Nhập tên tài khoản của bạn\"\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <Label>Mật khẩu</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  name=\"password\"\r\n                  placeholder=\"Nhập mật khẩu của bạn\"\r\n                  value={password}\r\n                  onChange={handleChangePassword}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n              &nbsp;\r\n              <div className=\"form-group\">\r\n                <button\r\n                  className=\"btn btn-primary btn-block\"\r\n                  disabled={loading}\r\n                >\r\n                  {loading && (\r\n                    // <span className=\"spinner-border spinner-border-sm\"></span>\r\n                    <Spinner size=\"sm\" color=\"light\" />\r\n                  )}\r\n                  <span id=\"login-button\">Đăng nhập</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"login-suggestion\">\r\n                <span>Chưa có tài khoản?</span>\r\n                &nbsp;\r\n                <a href=\"/register\">Đăng ký</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div\r\n                className={\r\n                  success ? \"alert alert-success\" : \"alert alert-danger\"\r\n                }\r\n                role=\"alert\"\r\n              >\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form.jsx",["377","378"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-update.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\profile\\profile-update.jsx",["379"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Badge, Button, Container, Form, FormGroup, Input, Label, Row} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport UserService from \"../../../services/user-service\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function ProfileUpdate(props) {\r\n\r\n    const [user, setUser] = useState({});\r\n    const [userId, setUserId] = useState(props.match.params.id);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [status, setStatus] = useState('');\r\n    const [roles, setRoles] = useState([]);\r\n    const [athleteCodeUsed, setAthleteCodeUsed] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [dateOfBirth, setDateOfBirth] = useState('');\r\n    const [gender, setGender] = useState('');\r\n    const [job, setJob] = useState('');\r\n    const [hometown, setHometown] = useState('');\r\n    const [workplace, setWorkplace] = useState('');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n\r\n    const handleChangeFullName = event => setFullName(event.target.value);\r\n    const handleChangeDateOfBirth = event => setDateOfBirth(event.target.value);\r\n    const handleChangeGender = value => setGender(value);\r\n    const handleChangeJob = event => setJob(event.target.value);\r\n    const handleChangeHometown = event => setHometown(event.target.value);\r\n    const handleChangeWorkplace = event => setWorkplace(event.target.value);\r\n    \r\n    useEffect(() => {\r\n        if(userId)  {\r\n            UserService.getUserById(userId).then( res => {\r\n                let user = res.data;\r\n                setUser(user);\r\n                setUserId(user.id);\r\n                setUsername(user.username);\r\n                setPassword(user.password);\r\n                setEmail(user.email);\r\n                setStatus(user.status);\r\n                setRoles(user.roles);\r\n                setAthleteCodeUsed(user.athleteCodeUsed);\r\n                setFullName(user.fullname);\r\n                setDateOfBirth(user.dateOfBirth);\r\n                setGender(user.gender);\r\n                setJob(user.job);\r\n                setHometown(user.hometown);\r\n                setWorkplace(user.workplace);\r\n                setCreateAt(user.createAt);\r\n                setLastModified(user.lastModified);\r\n            });\r\n        }\r\n\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let user = {\r\n            id: userId,\r\n            username: username,\r\n            password: password,\r\n            email: email,\r\n            status: status,\r\n            roles: roles,\r\n            athleteCodeUsed: athleteCodeUsed,\r\n            fullname: fullName,\r\n            dateOfBirth: dateOfBirth,\r\n            gender: gender,\r\n            job: job,\r\n            hometown: hometown,\r\n            workplace: workplace,\r\n        };\r\n\r\n        UserService.updateUser(user, userId).then(\r\n\r\n            (response) => {\r\n                if (response.data.message === \"User have been edited!\") {\r\n                    setSuccess(true);\r\n                    setMessage(\"Hồ sơ cá nhân đã được chỉnh sửa!\");\r\n                }\r\n                setTimeout(() => {\r\n                    setVisible(false);\r\n                    props.history.push(`/profile/${userId}`);\r\n                }, 2000);\r\n            }\r\n        );\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    \r\n    const title = <h2>Sửa hồ sơ cá nhân</h2>;\r\n            \r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n                {!success && (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    {userId ? (\r\n                        <FormGroup>\r\n                            <Label for=\"id\">ID người dùng</Label>\r\n                            <Input type=\"text\" name=\"id\" id=\"id\" value={userId} readOnly={userId ? true : false}/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"username\">Tên tài khoản</Label>\r\n                        <Input type=\"text\"  name=\"username\" id=\"username\" value={username} readOnly/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input type=\"text\"  name=\"email\" id=\"email\" value={email} readOnly/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label>Trạng thái</Label>\r\n                        <div>\r\n                            <Badge color=\"secondary\">{user.status === 1 ? \"Đã kích hoạt\" : \"Đã bị khóa\"}</Badge>\r\n                        </div>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"roles\">Quyền</Label>\r\n                            {user.roles ? user.roles.map((role, j) => (\r\n                                <div>\r\n                                    <Badge color=\"secondary\">{role.name === \"ROLE_ATHLETE\" ? \"Vận động viên\" : role.name === \"ROLE_COACH\" ? \"Huấn luyện viên\" : \"Quản trị viên\"}</Badge>\r\n                                </div>\r\n                            )) \r\n                            : null}  \r\n                    </FormGroup>\r\n                    {currentUser && currentUser.roles.includes(\"ROLE_ATHLETE\") ? (\r\n                        <FormGroup>\r\n                            <Label for=\"athleteCodeUsed\">Mã vận động viên sử dụng</Label>\r\n                            <Input type=\"text\"  name=\"athleteCodeUsed\" id=\"athleteCodeUsed\" value={athleteCodeUsed} readOnly/>\r\n                        </FormGroup>) \r\n                    : null }\r\n                    <FormGroup>\r\n                        <Label for=\"full-name\">Họ tên người dùng</Label>\r\n                        <Input type=\"text\"  name=\"full-name\" id=\"full-name\" value={fullName} onChange={handleChangeFullName} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"date-of-birth\">Ngày sinh</Label>\r\n                        <Input type={userId ? \"text\" : \"date\"} name=\"date-of-birth\" id=\"date-of-birth\" value={dateOfBirth} onChange={handleChangeDateOfBirth} />\r\n                    </FormGroup>\r\n                    <FormGroup tag=\"fieldset\">\r\n                        <Row>\r\n                            <Label md=\"2\">Giới tính</Label>\r\n                        </Row>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 0 ? true : false} onChange={() => handleChangeGender(0)} required/>{' '}\r\n                                    Nam\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 1 ? true : false} onChange={() => handleChangeGender(1)} required/>{' '}\r\n                                    Nữ\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"job\">Nghề nghiệp</Label>\r\n                        <Input type=\"text\"  name=\"job\" id=\"job\" value={job} onChange={handleChangeJob} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"hometown\">Quê quán</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={hometown} onChange={handleChangeHometown}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"workplace\">Nơi làm việc</Label>\r\n                        <Input type=\"text\"  name=\"workplace\" id=\"workplace\" value={workplace} onChange={handleChangeWorkplace} />\r\n                    </FormGroup>\r\n                    {userId ? (\r\n                        <div>\r\n                            <FormGroup>\r\n                                <Label for=\"create-at\">Ngày tạo</Label>\r\n                                <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"lastModified\">Ngày cập nhật</Label>\r\n                                <Input type=\"text\" name=\"lastModified\" id=\"lastModified\" value={lastModified} readOnly/>\r\n                            </FormGroup>\r\n                        </div>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to={`/profile/${userId}`}>\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                  </Form>   \r\n                )}\r\n                <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                    {message}\r\n                </Alert>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-delete-dialog.jsx",["380","381"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport PhysicalFactorService from \"../../../services/physical-factor-service\";\r\n\r\nexport const PhysicalFactorDeleteDialog = (props) => {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [physicalFactor, setPhysicalFactor] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/physicalFactors`);\r\n  };\r\n\r\n  const deletePhysicalFactor = () => {\r\n    handleOpen();\r\n    if (physicalFactor.status === 0) {\r\n      PhysicalFactorService.deletePhysicalFactor(id).then((response) => {\r\n\r\n        if (response.data.message === \"PhysicalFactor has been deleted!\") {\r\n          setSuccess(true);\r\n          setMessage(\"Yếu tố thể lực đã được xóa!\");\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          handleClose();\r\n        }, 2000);\r\n      });\r\n    } else {\r\n      setMessage(\"Bạn không thể xóa yếu tố thể lực đã phân loại\");\r\n      setTimeout(() => {\r\n        setVisible(false);\r\n        handleClose();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    PhysicalFactorService.getPhysicalFactorById(id).then((res) => {\r\n      setPhysicalFactor(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa yếu tố thể lực này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deletePhysicalFactor}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-delete-dialog.jsx",["382","383"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport FormFactorService from \"../../../services/form-factor-service\";\r\n\r\nexport const FormFactorDeleteDialog = (props) => {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [formFactor, setFormFactor] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/formFactors`);\r\n  };\r\n\r\n  const deleteFormFactor = () => {\r\n    handleOpen();\r\n    if (formFactor.status === 0) {\r\n      FormFactorService.deleteFormFactor(id).then((response) => {\r\n        if (response.data.message === \"FormFactor has been deleted!\") {\r\n          setSuccess(true);\r\n          setMessage(\"Yếu tố hình thái đã được xóa!\");\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          handleClose();\r\n        }, 2000);\r\n      });\r\n    } else {\r\n      setMessage(\"Bạn không thể xóa yếu tố hình thái đã phân loại\");\r\n      setTimeout(() => {\r\n        setVisible(false);\r\n        handleClose();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    FormFactorService.getFormFactorById(id).then((res) => {\r\n      setFormFactor(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa yếu tố hình thái này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deleteFormFactor}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\form\\form-detail.jsx",["384","385"],"import { faArrowCircleLeft, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport FormFactorService from \"../../../services/form-factor-service\";\r\n\r\nexport default function FormFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [formFactor, setFormFactor] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        FormFactorService.getFormFactorById(id).then( res => {\r\n            var formFactor = res.data;\r\n            setFormFactor(formFactor);\r\n            setAthleteCode(formFactor.athlete.athleteCode);\r\n            setAthleteName(formFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố hình thái</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>Mã yếu tố hình thái</span>\r\n                    </dt>\r\n                    <dd>{formFactor.formFactorCode}</dd>\r\n                    <dt>\r\n                        <span>Mã vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteCode}</dd>\r\n                    <dt>\r\n                        <span>Tên vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Chỉ số Quetelet (g/cm)</span>\r\n                    </dt>\r\n                    <dd>{formFactor.queteletQuotient}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{formFactor.status === 1 ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{formFactor.createAt}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_COACH\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/formFactors/${formFactor.id}/edit`} >\r\n                        <FontAwesomeIcon icon={faEdit}/>\r\n                        &nbsp;\r\n                        <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/formFactors\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\account\\profile\\profile.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical.jsx",["386","387"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-delete-dialog.jsx",["388","389"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport PsychophysiologyFactorService from \"../../../services/psychophysiology-factor-service\";\r\n\r\nexport const PsychophysiologyFactorDeleteDialog = (props) => {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [psychophysiologyFactor, setPsychophysiologyFactor] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/psychophysiologyFactors`);\r\n  };\r\n\r\n  const deletePsychophysiologyFactor = () => {\r\n    handleOpen();\r\n    if (psychophysiologyFactor.status === 0) {\r\n      PsychophysiologyFactorService.deletePsychophysiologyFactor(id).then(\r\n        (response) => {\r\n          if (response.data.message === \"PsychophysiologyFactor has been deleted!\") {\r\n            setSuccess(true);\r\n            setMessage(\"Yếu tố tâm-sinh lý đã được xóa!\");\r\n          }\r\n          \r\n          setTimeout(() => {\r\n            setVisible(false);\r\n            handleClose();\r\n          }, 2000);\r\n        }\r\n      );\r\n    } else {\r\n      setMessage(\"Bạn không thể xóa yếu tố tâm-sinh lý đã phân loại\");\r\n      setTimeout(() => {\r\n        setVisible(false);\r\n        handleClose();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    PsychophysiologyFactorService.getPsychophysiologyFactorById(id).then(\r\n      (res) => {\r\n        setPsychophysiologyFactor(res.data);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa yếu tố tâm-sinh lý này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deletePsychophysiologyFactor}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\classification-function\\athlete-classification.jsx",["390","391"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-detail.jsx",["392","393"],"import { faArrowCircleLeft, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport PsychophysiologyFactorService from \"../../../services/psychophysiology-factor-service\";\r\n\r\nexport default function PsychophysiologyFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [psychophysiologyFactor, setPsychophysiologyFactor] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        PsychophysiologyFactorService.getPsychophysiologyFactorById(id).then( res => {\r\n            var psychophysiologyFactor = res.data;\r\n            setPsychophysiologyFactor(psychophysiologyFactor);\r\n            setAthleteCode(psychophysiologyFactor.athlete.id);\r\n            setAthleteName(psychophysiologyFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết yếu tố tâm-sinh lý</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>Mã yếu tố tâm-sinh lý</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.psychophysiologyFactorCode}</dd>\r\n                    <dt>\r\n                        <span>Mã vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteCode}</dd>\r\n                    <dt>\r\n                        <span>Tên vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Thời gian phản xạ đơn (s)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.singleReflectionTime}</dd>\r\n                    <dt>\r\n                        <span>Chỉ số dung tích sống (ml/kg)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.livingCapacityQuotient}</dd>\r\n                    <dt>\r\n                        <span>Tần số tim 5s sau chạy 100m (lần/ph)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.heartRateAtFiveSecondsAfterOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>Tần số tim hồi phục 30s sau chạy 100m (lần/ph)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>Hàm lượng axit lactic sau chạy 100m (mmol/lít)</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.lacticAcidContentAfterOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.status === 1 ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{psychophysiologyFactor.createAt}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_COACH\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/psychophysiologyFactors/${psychophysiologyFactor.id}/edit`} >\r\n                        <FontAwesomeIcon icon={faEdit}/>\r\n                        &nbsp;\r\n                        <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/psychophysiologyFactors\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-detail.jsx",["394","395"],"import { faArrowCircleLeft, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport PhysicalFactorService from \"../../../services/physical-factor-service\";\r\n\r\nexport default function PhysicalFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [physicalFactor, setPhysicalFactor] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        PhysicalFactorService.getPhysicalFactorById(id).then( res => {\r\n            var physicalFactor = res.data;\r\n            setPhysicalFactor(physicalFactor);\r\n            setAthleteCode(physicalFactor.athlete.athleteCode);\r\n            setAthleteName(physicalFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết Yếu tố thể lực</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>Mã yếu tố thể lực</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.physicalFactorCode}</dd>\r\n                    <dt>\r\n                        <span>Mã vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteCode}</dd>\r\n                    <dt>\r\n                        <span>Tên vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Thời gian phản xạ xuất phát (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.timeOfReflectionStart}</dd>\r\n                    <dt>\r\n                        <span>Chạy 30m tốc độ cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thirtyMetersRunAtHighSpeed}</dd>\r\n                    <dt>\r\n                        <span>Chạy 30m xuất phát thấp (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thirtyMetersRunWithLowStart}</dd>\r\n                    <dt>\r\n                        <span>Chạy 60m xuất phát thấp (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.sixtyMetersRunWithLowStart}</dd>\r\n                    <dt>\r\n                        <span>Chạy 80m xuất phát cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.eightyMetersRunWithHighStart}</dd>\r\n                    <dt>\r\n                        <span>Chạy 150m xuất phát cao (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.oneHundredFiftyMetersRunWithHighStart}</dd>\r\n                    <dt>\r\n                        <span>Bật xa tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.awayJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>Bật 3 bước tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.threeStepsJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>Bật 10 bước tại chỗ (m)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.tenStepsJumpInPlace}</dd>\r\n                    <dt>\r\n                        <span>Thời gian của 20m cuối trong chạy 100m (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.runTimeOfLastTwentyMetersInOneHundredMetersRun}</dd>\r\n                    <dt>\r\n                        <span>Hệ số sức bền K (s)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.strengthCoefficient_K}</dd>\r\n                    <dt>\r\n                        <span>Nâng cao đùi tại chỗ 10s (lần)</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.thighsRaiseInPlaceForTenSeconds}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.status === 1 ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{physicalFactor.createAt}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_COACH\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/physicalFactors/${physicalFactor.id}/edit`} >\r\n                        <FontAwesomeIcon icon={faEdit}/>\r\n                        &nbsp;\r\n                        <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/physicalFactors\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\physical\\physical-update.jsx",["396"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport PhysicalFactorService from \"../../../services/physical-factor-service\";\r\nimport AthleteService from \"../../../services/athlete-service\";\r\nimport CodeGeneration from \"../../../utils/code-generation\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function PhysicalFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [physicalFactorCode, setPhysicalFactorCode] = useState('');\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [timeOfReflectionStart, setTimeOfReflectionStart] = useState('');\r\n    const [thirtyMetersRunAtHighSpeed, setThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [thirtyMetersRunWithLowStart, setThirtyMetersRunWithLowStart] = useState('');\r\n    const [sixtyMetersRunWithLowStart, setSixtyMetersRunWithLowStart] = useState('');\r\n    const [eightyMetersRunWithHighStart, setEightyMetersRunWithHighStart] = useState('');\r\n    const [oneHundredFiftyMetersRunWithHighStart, setOneHundredFiftyMetersRunWithHighStart] = useState('');\r\n    const [awayJumpInPlace, setAwayJumpInPlace] = useState('');\r\n    const [threeStepsJumpInPlace, setThreeStepsJumpInPlace] = useState('');\r\n    const [tenStepsJumpInPlace, setTenStepsJumpInPlace] = useState('');\r\n    const [runTimeOfLastTwentyMetersInOneHundredMetersRun, setRunTimeOfLastTwentyMetersInOneHundredMetersRun] = useState('');\r\n    const [strengthCoefficient_K, setStrengthCoefficient_K] = useState('');\r\n    const [thighsRaiseInPlaceForTenSeconds, setThighsRaiseInPlaceForTenSeconds] = useState('');\r\n    const [status, setStatus] = useState(0);\r\n    const [createAt, setCreateAt] = useState('');\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n    const handleChangeAthleteCode = event => setAthleteCode(event.target.value);\r\n    const handleChangeTimeOfReflectionStart = event => setTimeOfReflectionStart(event.target.value);\r\n    const handleChangeThirtyMetersRunAtHighSpeed = event => setThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleChangeThirtyMetersRunWithLowStart = event => setThirtyMetersRunWithLowStart(event.target.value);\r\n    const handleChangeSixtyMetersRunWithLowStart = event => setSixtyMetersRunWithLowStart(event.target.value);\r\n    const handleChangeEightyMetersRunWithHighStart = event => setEightyMetersRunWithHighStart(event.target.value);\r\n    const handleChangeOneHundredFiftyMetersRunWithHighStart = event => setOneHundredFiftyMetersRunWithHighStart(event.target.value);\r\n    const handleChangeAwayJumpInPlace = event => setAwayJumpInPlace(event.target.value);\r\n    const handleChangeThreeStepsJumpInPlace = event => setThreeStepsJumpInPlace(event.target.value);\r\n    const handleChangeTenStepsJumpInPlace = event => setTenStepsJumpInPlace(event.target.value);\r\n    const handleChangeRunTimeOfLastTwentyMetersInOneHundredMetersRun = event => setRunTimeOfLastTwentyMetersInOneHundredMetersRun(event.target.value);\r\n    const handleChangeStrengthCoefficient_K = event => setStrengthCoefficient_K(event.target.value);\r\n    const handleChangeThighsRaiseInPlaceForTenSeconds = event => setThighsRaiseInPlaceForTenSeconds(event.target.value);\r\n\r\n    useEffect(() => {\r\n        if(id)  {\r\n            PhysicalFactorService.getPhysicalFactorById(id).then( res => {\r\n                let physicalFactor = res.data;\r\n                setId(physicalFactor.id);\r\n                setPhysicalFactorCode(physicalFactor.physicalFactorCode);\r\n                setAthleteCode(physicalFactor.athlete.athleteCode);\r\n                setTimeOfReflectionStart(physicalFactor.timeOfReflectionStart);\r\n                setThirtyMetersRunAtHighSpeed(physicalFactor.thirtyMetersRunAtHighSpeed);\r\n                setThirtyMetersRunWithLowStart(physicalFactor.thirtyMetersRunWithLowStart);\r\n                setSixtyMetersRunWithLowStart(physicalFactor.sixtyMetersRunWithLowStart);\r\n                setEightyMetersRunWithHighStart(physicalFactor.eightyMetersRunWithHighStart);\r\n                setOneHundredFiftyMetersRunWithHighStart(physicalFactor.oneHundredFiftyMetersRunWithHighStart);\r\n                setAwayJumpInPlace(physicalFactor.awayJumpInPlace);\r\n                setThreeStepsJumpInPlace(physicalFactor.threeStepsJumpInPlace);\r\n                setTenStepsJumpInPlace(physicalFactor.tenStepsJumpInPlace);\r\n                setRunTimeOfLastTwentyMetersInOneHundredMetersRun(physicalFactor.runTimeOfLastTwentyMetersInOneHundredMetersRun);\r\n                setStrengthCoefficient_K(physicalFactor.strengthCoefficient_K);\r\n                setThighsRaiseInPlaceForTenSeconds(physicalFactor.thighsRaiseInPlaceForTenSeconds);\r\n                setStatus(physicalFactor.status);\r\n                setCreateAt(physicalFactor.createAt);\r\n            });\r\n        }\r\n\r\n        let user = AuthenticationService.getCurrentUser();\r\n        AthleteService.getAllAthletesByCoachId(user.id).then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let notNullAthleteCode = athleteCode ? athleteCode : athletes[0].athleteCode;\r\n        AthleteService.getAthleteByAthleteCode(notNullAthleteCode).then((res) => {\r\n            let athlete = res.data;\r\n            let code = CodeGeneration.generateCode('PH', notNullAthleteCode.substring(2), true);\r\n            let physicalFactor = {\r\n                id: id,\r\n                physicalFactorCode: id ? physicalFactorCode : code,\r\n                athlete: athlete,\r\n                timeOfReflectionStart: timeOfReflectionStart,\r\n                thirtyMetersRunAtHighSpeed: thirtyMetersRunAtHighSpeed,\r\n                thirtyMetersRunWithLowStart: thirtyMetersRunWithLowStart,\r\n                sixtyMetersRunWithLowStart: sixtyMetersRunWithLowStart,\r\n                eightyMetersRunWithHighStart: eightyMetersRunWithHighStart,\r\n                oneHundredFiftyMetersRunWithHighStart: oneHundredFiftyMetersRunWithHighStart,\r\n                awayJumpInPlace: awayJumpInPlace,\r\n                threeStepsJumpInPlace: threeStepsJumpInPlace,\r\n                tenStepsJumpInPlace: tenStepsJumpInPlace,\r\n                runTimeOfLastTwentyMetersInOneHundredMetersRun: runTimeOfLastTwentyMetersInOneHundredMetersRun,\r\n                strengthCoefficient_K: strengthCoefficient_K,\r\n                thighsRaiseInPlaceForTenSeconds: thighsRaiseInPlaceForTenSeconds,\r\n                status: status\r\n            };\r\n    \r\n            if(!id) {\r\n                PhysicalFactorService.getPhysicalFactorByPhysicalFactorCode(code).then(res => {\r\n                    let uniquePhysicalFactor = res.data;\r\n                    if (uniquePhysicalFactor.physicalFactorCode === physicalFactor.physicalFactorCode) {\r\n                        if (uniquePhysicalFactor.status === 1) {\r\n                            setMessage(`Vận động viên mã ${uniquePhysicalFactor.athlete.athleteCode} đã được phân loại trong tháng ${uniquePhysicalFactor.createAt.substring(3,10)}. Vui lòng thêm yếu tố thể lực cho vận động viên vào tháng sau.`);\r\n                        }\r\n                        else {\r\n                            setMessage(`Yếu tố thể lực của vận động viên mã ${uniquePhysicalFactor.athlete.athleteCode} trong tháng ${uniquePhysicalFactor.createAt.substring(3,10)} đã tồn tại. Vui lòng xóa yếu tố thể lực mã ${uniquePhysicalFactor.physicalFactorCode} trước khi thêm.`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        PhysicalFactorService.createPhysicalFactor(physicalFactor).then(\r\n                            (response) => {\r\n                                if (response.data.message === \"PhysicalFactor have been added!\") {\r\n                                    setSuccess(true);\r\n                                    setMessage(\"Yếu tố thể lực đã được thêm!\");\r\n                                }\r\n                                \r\n                                setTimeout(() => {\r\n                                    setVisible(false);\r\n                                    props.history.push('/physicalFactors');\r\n                                }, 2000);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            } \r\n            else {\r\n                PhysicalFactorService.updatePhysicalFactor(physicalFactor, id).then(\r\n                    (response) => {\r\n                        if (response.data.message === \"PhysicalFactor have been edited!\") {\r\n                            setSuccess(true);\r\n                            setMessage(\"Yếu tố thể lực đã được chỉnh sửa!\");\r\n                        }\r\n                        \r\n                        setTimeout(() => {\r\n                            setVisible(false);\r\n                            props.history.push('/physicalFactors');\r\n                        }, 2000);\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa yếu tố thể lực\" : \"Thêm yếu tố thể lực\" }</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n             {!success && (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"code\">Mã yếu tố thể lực</Label>\r\n                            <Input type=\"text\" name=\"code\" id=\"code\" value={physicalFactorCode} readOnly={id ? true : false}/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-code\">Mã vận động viên</Label>\r\n                        <Input type={id ? \"text\" : \"select\"} name=\"athlete-code\" id=\"athlete-code\" value={athleteCode} onChange={handleChangeAthleteCode}  readOnly={id ? true : false}>\r\n                            {/* <option>-- Chọn mã vận động viên --</option> */}\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.athleteCode}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-time-of-reflection-start\">Thời gian phản xạ xuất phát (s)</Label>\r\n                        <Input type=\"text\" id=\"time-of-reflection-start\" name=\"criteria\" value={timeOfReflectionStart} onChange={handleChangeTimeOfReflectionStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thirty-meters-run-at-high-speed\">Chạy 30m tốc độ cao (s)</Label>\r\n                        <Input type=\"text\" id=\"thirty-meters-run-at-high-speed\" name=\"criteria\" value={thirtyMetersRunAtHighSpeed} onChange={handleChangeThirtyMetersRunAtHighSpeed} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thirty-meters-run-with-low-start\">Chạy 30m xuất phát thấp (s)</Label>\r\n                        <Input type=\"text\" id=\"thirty-meters-run-with-low-start\" name=\"criteria\" value={thirtyMetersRunWithLowStart} onChange={handleChangeThirtyMetersRunWithLowStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-sixty-meters-run-with-low-start\">Chạy 60m xuất phát thấp (s)</Label>\r\n                        <Input type=\"text\" id=\"sixty-meters-run-with-low-start\" name=\"criteria\" value={sixtyMetersRunWithLowStart} onChange={handleChangeSixtyMetersRunWithLowStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-eighty-meters-run-with-high-start\">Chạy 80m xuất phát cao (s)</Label>\r\n                        <Input type=\"text\" id=\"eighty-meters-run-with-high-start\" name=\"criteria\" value={eightyMetersRunWithHighStart} onChange={handleChangeEightyMetersRunWithHighStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-one-hundred-fifty-meters-run-with-high-start\">Chạy 150m xuất phát cao (s)</Label>\r\n                        <Input type=\"text\" id=\"one-hundred-fifty-meters-run-with-high-start\" name=\"criteria\" value={oneHundredFiftyMetersRunWithHighStart} onChange={handleChangeOneHundredFiftyMetersRunWithHighStart} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-away-jump-in-place\">Bật xa tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"away-jump-in-place\" name=\"criteria\" value={awayJumpInPlace} onChange={handleChangeAwayJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"three-steps-jump-in-place\">Bật 3 bước tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"three-steps-jump-in-place\" name=\"criteria\" value={threeStepsJumpInPlace} onChange={handleChangeThreeStepsJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-ten-steps-jump-in-place\">Bật 10 bước tại chỗ (m)</Label>\r\n                        <Input type=\"text\" id=\"ten-steps-jump-in-place\" name=\"criteria\" value={tenStepsJumpInPlace} onChange={handleChangeTenStepsJumpInPlace} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-run-time-of-last-twenty-meters-in-one-hundred-meters-run\">Thời gian của 20m cuối trong chạy 100m (s)</Label>\r\n                        <Input type=\"text\" id=\"run-time-of-last-twenty-meters-in-one-hundred-meters-run\" name=\"criteria\" value={runTimeOfLastTwentyMetersInOneHundredMetersRun} onChange={handleChangeRunTimeOfLastTwentyMetersInOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-strength-coefficient-K\">Hệ số sức bền K (s)</Label>\r\n                        <Input type=\"text\" id=\"strength-coefficient-K\" name=\"criteria\" value={strengthCoefficient_K} onChange={handleChangeStrengthCoefficient_K} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-thighs-raise-in-place-for-ten-seconds\">Nâng cao đùi tại chỗ 10s (lần)</Label>\r\n                        <Input type=\"text\" id=\"thighs-raise-in-place-for-ten-seconds\" name=\"criteria\" value={thighsRaiseInPlaceForTenSeconds} onChange={handleChangeThighsRaiseInPlaceForTenSeconds} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"create-at\">Ngày tạo</Label>\r\n                            <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/physicalFactors\">\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n             )}\r\n             <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                {message}\r\n             </Alert>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\rankings\\rankings.jsx",["397","398","399","400","401"],"import Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Alert, Col, Container, DropdownItem, DropdownMenu, DropdownToggle, Label, Table, UncontrolledDropdown} from \"reactstrap\";\r\nimport AthleteClassificationService from \"../../services/athlete-classification-service\";\r\nimport AuthenticationService from \"../../services/authentication-service\";\r\n\r\nexport default function Rankings(props) {\r\n\r\n  const [athleteClassifications, setAthleteClassifications] = useState([]);\r\n  const [rankings, setRankings] = useState([]);\r\n  const [month, setMonth] = useState('');\r\n  const [year, setYear] = useState('');\r\n  const [monthYear, setMonthYear] = useState('');\r\n  const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [pageSize, setPageSize] = useState(5);\r\n\r\n  const handlePageChange = (event, value) => {\r\n    setPage(value);\r\n  }\r\n\r\n  const handleOption = (month, year, monthYear) => {\r\n    setMonth(month);\r\n    setYear(year);\r\n    setMonthYear(monthYear);\r\n    let params = {};\r\n    if (currentUser) {\r\n      if (currentUser.roles.includes(\"ROLE_COACH\")) {\r\n        params = {\r\n          month: month,\r\n          year: year,\r\n          coachId: currentUser.id,\r\n          page: page - 1,\r\n          size: pageSize\r\n        }\r\n        AthleteClassificationService.getAthleteClassificationsByMonthAndYearAndCoachId(params).then((res) => {\r\n\r\n          const { athleteClassifications, totalPages } = res.data;\r\n\r\n            setRankings(athleteClassifications);\r\n            setCount(totalPages);\r\n\r\n            console.log(res.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          if (error.response.status === 401) {\r\n            localStorage.removeItem(\"user\");\r\n          }\r\n        });\r\n      }\r\n      else {\r\n        params = {\r\n          month: month,\r\n          year: year,\r\n          athleteCodeUsed: currentUser.athleteCodeUsed,\r\n          page: page - 1,\r\n          size: pageSize\r\n        }\r\n        AthleteClassificationService.getAthleteClassificationsByMonthAndYearAndAthleteCodeUsed(params).then((res) => {\r\n          const { athleteClassifications, totalPages } = res.data;\r\n\r\n            setRankings(athleteClassifications);\r\n            setCount(totalPages);\r\n\r\n            console.log(res.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          if (error.response.status === 401) {\r\n            localStorage.removeItem(\"user\");\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleOption(month, year, monthYear);\r\n  },[page, pageSize, monthYear]);\r\n  \r\n  useEffect(() => {\r\n      let user = AuthenticationService.getCurrentUser();\r\n      setCurrentUser(user);\r\n      if (user) {\r\n        if (user.roles.includes(\"ROLE_COACH\")) {\r\n          AthleteClassificationService.getAllAthleteClassificationsByCoachId(user.id).then((res) => {\r\n            setAthleteClassifications(res.data);\r\n            let athleteClassifications = res.data;\r\n            if (athleteClassifications.length > 0) {\r\n              handleOption(athleteClassifications[0].createAt.substring(3,5), athleteClassifications[0].createAt.substring(6,10), athleteClassifications[0].createAt.substring(3,10));\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          AthleteClassificationService.getAllAthleteClassificationsByAthleteCodeUsed(user.athleteCodeUsed).then((res) => {\r\n            setAthleteClassifications(res.data);\r\n            let athleteClassifications = res.data;\r\n            if (athleteClassifications.length > 0) {\r\n              handleOption(athleteClassifications[0].createAt.substring(3,5), athleteClassifications[0].createAt.substring(6,10), athleteClassifications[0].createAt.substring(3,10));\r\n            }\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        props.history.push(`/login`);\r\n      }\r\n  },[]);\r\n\r\n  //  document.write(JSON.stringify(count));\r\n\r\n    return(\r\n      <div>\r\n        <Container>\r\n          <h2>Bảng xếp hạng trình độ tập luyện</h2>\r\n         {athleteClassifications.length > 0 ? (  \r\n          <div>\r\n           <UncontrolledDropdown inNavbar>\r\n            <Label md=\"5\">Tháng</Label>\r\n            <DropdownToggle nav caret>{monthYear}</DropdownToggle>\r\n            <DropdownMenu>\r\n              {athleteClassifications.map((athleteClassification, i) => (\r\n                <DropdownItem onClick = {() => handleOption(athleteClassification.createAt.substring(3,5), athleteClassification.createAt.substring(6,10), athleteClassification.createAt.substring(3,10))}>{athleteClassification.createAt.substring(3,10)}</DropdownItem>\r\n              ))}\r\n            </DropdownMenu>\r\n           </UncontrolledDropdown>\r\n          &nbsp;\r\n           <Table responsive hover>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Mã vận động viên</th>\r\n                <th>Tên vận động viên</th>\r\n                <th>Mã yếu tố thể lực</th>\r\n                <th>Mã yếu tố kỹ thuật</th>\r\n                <th>Mã yếu tố tâm-sinh lý</th>\r\n                <th>Mã yếu tố hình thái</th>\r\n                <th>Tổng điểm</th>\r\n                <th>Xếp loại</th>\r\n                <th>Xếp hạng</th>\r\n                <th>Tổng số vận động viên</th>\r\n                <th>Ngày tạo</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rankings.map((athleteClassification, i) => (\r\n                <tr>\r\n                  <td>{pageSize * (page - 1) + (i + 1)}</td>\r\n                  <td><Link to={`/athletes/${athleteClassification.athlete.id}/detail`}>{athleteClassification.athlete.athleteCode}</Link></td>\r\n                  <td>{athleteClassification.athlete.athleteName}</td>\r\n                  <td><Link to={`/physicalFactors/${athleteClassification.physicalFactor.id}/detail`}>{athleteClassification.physicalFactor.physicalFactorCode}</Link></td>\r\n                  <td><Link to={`/technicalFactors/${athleteClassification.technicalFactor.id}/detail`}>{athleteClassification.technicalFactor.technicalFactorCode}</Link></td>\r\n                  <td><Link to={`/psychophysiologyFactors/${athleteClassification.psychophysiologyFactor.id}/detail`}>{athleteClassification.psychophysiologyFactor.psychophysiologyFactorCode}</Link></td>\r\n                  <td><Link to={`/formFactors/${athleteClassification.formFactor.id}/detail`}>{athleteClassification.formFactor.formFactorCode}</Link></td>\r\n                  <td>{athleteClassification.totalScoresOfCriterias}</td>\r\n                  <td>{athleteClassification.grade}</td>\r\n                  <td>{athleteClassification.athleteRank}</td>\r\n                  <td>{athleteClassification.athleteCount}</td>\r\n                  <td>{athleteClassification.createAt}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n           </Table>\r\n\r\n           <Pagination\r\n              className=\"my-5\"\r\n              count={count}\r\n              page={page}\r\n              siblingCount={1}\r\n              boundaryCount={1}\r\n              variant=\"outlined\"\r\n              shape=\"rounded\"\r\n              showFirstButton\r\n              showLastButton\r\n              onChange={handlePageChange}\r\n           /> \r\n          </div>\r\n         ) : (\r\n          <div>\r\n            <Alert color=\"warning\">Không tìm thấy bảng xếp hạng nào.</Alert>\r\n          </div>\r\n         )}\r\n        </Container>\r\n      </div> \r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-delete-dialog.jsx",["402","403","404"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport UserService from \"../../services/user-service\";\r\n\r\nexport const UserDeleteDialog = (props) => {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [user, setUser] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/users`);\r\n    window.location.reload();\r\n  };\r\n\r\n  const deleteUser = () => {\r\n    handleOpen();\r\n    UserService.deleteUser(id).then((response) => {\r\n      if (response.data.message === \"User has been deleted!\") {\r\n        setSuccess(true);\r\n        setMessage(\"Người dùng đã được xóa!\");\r\n      }\r\n      \r\n      setTimeout(() => {\r\n        setVisible(false);\r\n        handleClose();\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    UserService.getUserById(id).then((res) => {\r\n      setUser(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa người dùng này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deleteUser}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-update.jsx",["405"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Button, Container, Form, FormGroup, Input, Label, Row} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport UserService from \"../../services/user-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function UserUpdate(props) {\r\n\r\n    const [user, setUser] = useState({});\r\n    const [userId, setUserId] = useState(props.match.params.id);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [status, setStatus] = useState('');\r\n    const [roles, setRoles] = useState([]);\r\n    const [athleteCodeUsed, setAthleteCodeUsed] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [dateOfBirth, setDateOfBirth] = useState('');\r\n    const [gender, setGender] = useState('');\r\n    const [job, setJob] = useState('');\r\n    const [hometown, setHometown] = useState('');\r\n    const [workplace, setWorkplace] = useState('');\r\n    const [createAt, setCreateAt] = useState('');\r\n    const [lastModified, setLastModified] = useState('');\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n    const handleChangeUsername = event => setUsername(event.target.value);\r\n    const handleChangePassword = event => setPassword(event.target.value);\r\n    const handleChangeEmail = event => setEmail(event.target.value);\r\n\r\n    const handleChangeStatus = (status) => {\r\n        if (status === 1) {\r\n            setStatus(0);\r\n        }\r\n        else {\r\n            setStatus(1);\r\n        }\r\n    }\r\n\r\n    const handleChangeRoles = event => {\r\n        let options = event.target.options;\r\n        let length = options.length;\r\n        let roles = [];\r\n        for (let i = 0; i < length; i++) {\r\n            if (options[i].selected) {\r\n                let role = {\r\n                    id : i + 1,\r\n                    name: options[i].value\r\n                };\r\n                roles.push(role);\r\n            }\r\n        }\r\n        setRoles(roles);\r\n    }\r\n\r\n    const handleChangeAthleteCodeUsed = event => setAthleteCodeUsed(event.target.value);\r\n    const handleChangeFullName = event => setFullName(event.target.value);\r\n    const handleChangeDateOfBirth = event => setDateOfBirth(event.target.value);\r\n    const handleChangeGender = value => setGender(value);\r\n    const handleChangeJob = event => setJob(event.target.value);\r\n    const handleChangeHometown = event => setHometown(event.target.value);\r\n    const handleChangeWorkplace = event => setWorkplace(event.target.value);\r\n    \r\n    useEffect(() => {\r\n        if(userId)  {\r\n            UserService.getUserById(userId).then( res => {\r\n                let user = res.data;\r\n                setUser(user);\r\n                setUserId(user.id);\r\n                setUsername(user.username);\r\n                setEmail(user.email);\r\n                setPassword(user.password);\r\n                setStatus(user.status);\r\n                setRoles(user.roles);\r\n                setAthleteCodeUsed(user.athleteCodeUsed);\r\n                setFullName(user.fullname);\r\n                setDateOfBirth(user.dateOfBirth);\r\n                setGender(user.gender);\r\n                setJob(user.job);\r\n                setHometown(user.hometown);\r\n                setWorkplace(user.workplace);\r\n                setCreateAt(user.createAt);\r\n                setLastModified(user.lastModified);\r\n            });\r\n        }\r\n\r\n    },[]);\r\n\r\n    const handleCheckContainsRole = (roles, roleName) => {\r\n        for (let i = 0; i < roles.length; i++) {\r\n            if (roles[i].name === roleName) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let user = {\r\n            id: userId,\r\n            username: username,\r\n            password: password,\r\n            email: email,\r\n            status: status ? status : 0,\r\n            roles: roles,\r\n            athleteCodeUsed: athleteCodeUsed,\r\n            fullname: fullName,\r\n            dateOfBirth: userId ? dateOfBirth : moment(dateOfBirth).format(\"DD-MM-YYYY\"),\r\n            gender: gender,\r\n            job: job,\r\n            hometown: hometown,\r\n            workplace: workplace\r\n        };\r\n    \r\n        if(!userId) {\r\n            UserService.createUser(user).then(\r\n                (response) => {\r\n                    if (response.data.message === \"User have been added!\") {\r\n                        setMessage(\"Người dùng đã được thêm!\");\r\n                    }\r\n                    setSuccess(true);\r\n                    setTimeout(() => {\r\n                        setVisible(false);\r\n                        props.history.push('/users');\r\n                    }, 2000);\r\n                },\r\n\r\n                (error) => {\r\n                    const ResMessage =\r\n                      (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                      error.message ||\r\n                      error.toString();\r\n\r\n                    if (ResMessage === \"Error: Username is already taken!\") {\r\n                        setMessage(\"Tên tài khoản đã tồn tại!\");\r\n                    }\r\n                    else if (ResMessage === \"Error: Email is already in use!\") {\r\n                        setMessage(\"Email đã được sử dụng!\");\r\n                    }   \r\n                }\r\n            );\r\n        } \r\n        else {\r\n            UserService.updateUser(user, userId).then(\r\n                (response) => {\r\n                    if (response.data.message === \"User have been edited!\") {\r\n                        setSuccess(true);\r\n                        setMessage(\"Người dùng đã được chỉnh sửa!\");\r\n                    }\r\n                    setTimeout(() => {\r\n                        setVisible(false);\r\n                        props.history.push('/users');\r\n                    }, 2000);\r\n                }\r\n            );\r\n        }\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    \r\n    const title = <h2>{ userId ? \"Sửa người dùng\" : \"Thêm người dùng\" }</h2>;\r\n            \r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n             {!success && (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {userId ? (\r\n                        <FormGroup>\r\n                            <Label for=\"id\">ID người dùng</Label>\r\n                            <Input type=\"text\" name=\"id\" id=\"id\" value={userId} readOnly={userId ? true : false}/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"username\">Tên tài khoản</Label>\r\n                        <Input type=\"text\"  name=\"username\" id=\"username\" value={username} onChange={handleChangeUsername} required readOnly={userId ? true : false}/>\r\n                    </FormGroup>\r\n                    {!userId ? (\r\n                        <FormGroup>\r\n                            <Label for=\"password\">Mật khẩu</Label>\r\n                            <Input type=\"password\" name=\"password\" id=\"password\" value={password} onChange={handleChangePassword} required/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input type=\"text\"  name=\"email\" id=\"email\" value={email} onChange={handleChangeEmail} required readOnly={userId ? true : false}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Row>\r\n                            <Label md=\"2\">Trạng thái</Label>\r\n                        </Row>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input type=\"checkbox\" name=\"status\" id=\"status\" value={status} checked={status === 1 ? true : false} onChange={() => handleChangeStatus(status)} />{' '}\r\n                                    Kích hoạt\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"roles\">Quyền</Label>\r\n                            <Input type=\"select\" name=\"roles\" id=\"roles\" multiple onChange={handleChangeRoles} required>\r\n                                <option value=\"ROLE_ATHLETE\" selected={handleCheckContainsRole(roles, \"ROLE_ATHLETE\")}>Vận động viên</option>\r\n                                <option value=\"ROLE_COACH\" selected={handleCheckContainsRole(roles, \"ROLE_COACH\")}>Huấn luyện viên</option>\r\n                                <option value=\"ROLE_ADMIN\" selected={handleCheckContainsRole(roles, \"ROLE_ADMIN\")}>Quản trị viên</option>\r\n                            </Input>\r\n                    </FormGroup>\r\n                    {user && handleCheckContainsRole(roles,\"ROLE_ATHLETE\") ? (\r\n                        <FormGroup>\r\n                            <Label for=\"athleteCodeUsed\">Mã vận động viên sử dụng</Label>\r\n                            <Input type=\"text\"  name=\"athleteCodeUsed\" id=\"athleteCodeUsed\" value={athleteCodeUsed} onChange={handleChangeAthleteCodeUsed} readOnly={userId ? true : false} required />\r\n                        </FormGroup>) \r\n                    : null }\r\n                    <FormGroup>\r\n                        <Label for=\"full-name\">Họ tên người dùng</Label>\r\n                        <Input type=\"text\"  name=\"full-name\" id=\"full-name\" value={fullName} onChange={handleChangeFullName} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"date-of-birth\">Ngày sinh</Label>\r\n                        <Input type={userId ? \"text\" : \"date\"} name=\"date-of-birth\" id=\"date-of-birth\" value={dateOfBirth} onChange={handleChangeDateOfBirth} required/>\r\n                    </FormGroup>\r\n                    <FormGroup tag=\"fieldset\">\r\n                        <Row>\r\n                            <Label md=\"1\">Giới tính</Label>\r\n                        </Row>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 0 ? true : false} onChange={() => handleChangeGender(0)} required/>{' '}\r\n                                    Nam\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <FormGroup check inline>\r\n                            <Label check>\r\n                                <Input type=\"radio\" name=\"gender\" value={gender} checked={gender === 1 ? true : false} onChange={() => handleChangeGender(1)} required/>{' '}\r\n                                    Nữ\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"job\">Nghề nghiệp</Label>\r\n                        <Input type=\"text\"  name=\"job\" id=\"job\" value={job} onChange={handleChangeJob} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"hometown\">Quê quán</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={hometown} onChange={handleChangeHometown}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"workplace\">Nơi làm việc</Label>\r\n                        <Input type=\"text\"  name=\"workplace\" id=\"workplace\" value={workplace} onChange={handleChangeWorkplace} />\r\n                    </FormGroup>\r\n                    {userId ? (\r\n                        <div>\r\n                            <FormGroup>\r\n                                <Label for=\"create-at\">Ngày tạo</Label>\r\n                                <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"lastModified\">Ngày cập nhật</Label>\r\n                                <Input type=\"text\" name=\"lastModified\" id=\"lastModified\" value={lastModified} readOnly/>\r\n                            </FormGroup>\r\n                        </div>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/users\">\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n             )}\r\n             <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                {message}\r\n             </Alert>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user-detail.jsx",["406","407"],"import { faArrowCircleLeft, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge, Button, Container } from \"reactstrap\";\r\nimport AuthenticationService from \"../../services/authentication-service\";\r\nimport UserService from \"../../services/user-service\";\r\n\r\nexport default function UserDetail(props) {\r\n\r\n    const [userId, setUserId] = useState(props.match.params.id);\r\n    const [user, setUser] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n    \r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        UserService.getUserById(userId).then( res => {\r\n            setUser(res.data);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết người dùng</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>ID người dùng</span>\r\n                    </dt>\r\n                    <dd>{user.id}</dd>\r\n                    <dt>\r\n                        <span>Tên tài khoản</span>\r\n                    </dt>\r\n                    <dd>{user.username}</dd>\r\n                    <dt>\r\n                        <span>Email</span>\r\n                    </dt>\r\n                    <dd>{user.email}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>\r\n                        <div>\r\n                            <Badge color={user.status === 1 ? \"success\" : \"danger\"}>{user.status === 1 ? \"Đã kích hoạt\" : \"Đã bị khóa\"}</Badge>\r\n                        </div>\r\n                    </dd>\r\n                    <dt>\r\n                        <span>Quyền</span>\r\n                    </dt>\r\n                    <dd>\r\n                    {user.roles ? user.roles.map((role, j) => (\r\n                      <div>\r\n                        <Badge color=\"info\">{role.name === \"ROLE_ATHLETE\" ? \"Vận động viên\" : role.name === \"ROLE_COACH\" ? \"Huấn luyện viên\" : \"Quản trị viên\"}</Badge>\r\n                      </div>\r\n                    )) \r\n                    : null}    \r\n                    </dd>\r\n                    <dt>\r\n                        <span>Mã vận động viên sử dụng</span>\r\n                    </dt>\r\n                    <dd>{user.athleteCodeUsed}</dd>\r\n                    <dt>\r\n                        <span>Họ tên người dùng</span>\r\n                    </dt>\r\n                    <dd>{user.fullname}</dd>\r\n                    <dt>\r\n                        <span>Ngày sinh</span>\r\n                    </dt>\r\n                    <dd>{user.dateOfBirth}</dd>\r\n                    <dt>\r\n                        <span>Giới tính</span>\r\n                    </dt>\r\n                    <dd>{user.gender === 0 ? \"Nam\" : \"Nữ\"}</dd>\r\n                    <dt>\r\n                        <span>Nghề nghiệp</span>\r\n                    </dt>\r\n                    <dd>{user.job}</dd>\r\n                    <dt>\r\n                        <span>Quê quán</span>\r\n                    </dt>\r\n                    <dd>{user.hometown}</dd>\r\n                    <dt>\r\n                        <span>Nơi làm việc</span>\r\n                    </dt>\r\n                    <dd>{user.workplace}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{user.createAt}</dd>\r\n                    <dt>\r\n                        <span>Ngày cập nhật</span>\r\n                    </dt>\r\n                    <dd>{user.lastModified}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_ADMIN\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/users/${user.id}/edit`} >\r\n                        <FontAwesomeIcon icon={faEdit}/>\r\n                        &nbsp;\r\n                        <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                    ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/users\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical.jsx",["408","409"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology.jsx",["410","411"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-delete-dialog.jsx",["412","413"],"import { faBan, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport TechnicalFactorService from \"../../../services/technical-factor-service\";\r\n\r\nexport const TechnicalFactorDeleteDialog = (props) => {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [technicalFactor, setTechnicalFactor] = useState({});\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleOpen = () => setVisible(true);\r\n  const handleToggle = () => setVisible(!visible);\r\n\r\n  const handleClose = () => {\r\n    props.history.push(`/technicalFactors`);\r\n  };\r\n\r\n  const deleteTechnicalFactor = () => {\r\n    handleOpen();\r\n    if (technicalFactor.status === 0) {\r\n      TechnicalFactorService.deleteTechnicalFactor(id).then((response) => {\r\n        if (response.data.message === \"TechnicalFactor has been deleted!\") {\r\n          setSuccess(true);\r\n          setMessage(\"Yếu tố kỹ thuật đã được xóa!\");\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          handleClose();\r\n        }, 2000);\r\n      });\r\n    } else {\r\n      setMessage(\"Bạn không thể xóa yếu tố kỹ thuật đã phân loại\");\r\n      setTimeout(() => {\r\n        setVisible(false);\r\n        handleClose();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    TechnicalFactorService.getTechnicalFactorById(id).then((res) => {\r\n      setTechnicalFactor(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Modal isOpen toggle={handleClose}>\r\n          {!message && (\r\n            <div>\r\n              <ModalHeader toggle={handleClose}>\r\n                <span>Xác nhận thao tác xóa</span>\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <span>Bạn có chắc chắn muốn xóa yếu tố kỹ thuật này?</span>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"secondary\" onClick={handleClose}>\r\n                  <FontAwesomeIcon icon={faBan} />\r\n                  &nbsp;\r\n                  <span>Hủy</span>\r\n                </Button>\r\n                <Button color=\"danger\" onClick={deleteTechnicalFactor}>\r\n                  <FontAwesomeIcon icon={faTrashAlt} />\r\n                  &nbsp;\r\n                  <span>Xóa</span>\r\n                </Button>\r\n              </ModalFooter>\r\n            </div>\r\n          )}\r\n          <ModalBody>\r\n            <Alert\r\n              color={success ? \"success\" : \"danger\"}\r\n              isOpen={visible}\r\n              toggle={handleToggle}\r\n            >\r\n              {message}\r\n            </Alert>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\psychophysiology\\psychophysiology-update.jsx",["414"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport PsychophysiologyFactorService from \"../../../services/psychophysiology-factor-service\";\r\nimport AthleteService from \"../../../services/athlete-service\";\r\nimport CodeGeneration from \"../../../utils/code-generation\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function PsychophysiologyFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [psychophysiologyFactorCode, setPsychophysiologyFactorCode] = useState('');\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [singleReflectionTime, setSingleReflectionTime] = useState('');\r\n    const [livingCapacityQuotient, setLivingCapacityQuotient] = useState('');\r\n    const [heartRateAtFiveSecondsAfterOneHundredMetersRun, setHeartRateAtFiveSecondsAfterOneHundredMetersRun] = useState('');\r\n    const [restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun, setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun] = useState('');\r\n    const [lacticAcidContentAfterOneHundredMetersRun, setLacticAcidContentAfterOneHundredMetersRun] = useState('');\r\n    const [status, setStatus] = useState(0);\r\n    const [createAt, setCreateAt] = useState('');\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n    const handleChangeAthleteCode = event => setAthleteCode(event.target.value);\r\n    const handleChangeSingleReflectionTime = event => setSingleReflectionTime(event.target.value);\r\n    const handleChangeLivingCapacityQuotient = event => setLivingCapacityQuotient(event.target.value);\r\n    const handleChangeHeartRateAtFiveSecondsAfterOneHundredMetersRun = event => setHeartRateAtFiveSecondsAfterOneHundredMetersRun(event.target.value);\r\n    const handleChangeRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun = event => setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(event.target.value);\r\n    const handleChangeLacticAcidContentAfterOneHundredMetersRun = event => setLacticAcidContentAfterOneHundredMetersRun(event.target.value);\r\n\r\n    useEffect(() => {\r\n        if(id)  {\r\n            PsychophysiologyFactorService.getPsychophysiologyFactorById(id).then( res => {\r\n                let psychophysiologyFactor = res.data;\r\n                setId(psychophysiologyFactor.id);\r\n                setPsychophysiologyFactorCode(psychophysiologyFactor.psychophysiologyFactorCode);\r\n                setAthleteCode(psychophysiologyFactor.athlete.athleteCode);\r\n                setSingleReflectionTime(psychophysiologyFactor.singleReflectionTime);\r\n                setLivingCapacityQuotient(psychophysiologyFactor.livingCapacityQuotient);\r\n                setHeartRateAtFiveSecondsAfterOneHundredMetersRun(psychophysiologyFactor.heartRateAtFiveSecondsAfterOneHundredMetersRun);\r\n                setRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun(psychophysiologyFactor.restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun);\r\n                setLacticAcidContentAfterOneHundredMetersRun(psychophysiologyFactor.lacticAcidContentAfterOneHundredMetersRun);\r\n                setStatus(psychophysiologyFactor.status);\r\n                setCreateAt(psychophysiologyFactor.createAt);\r\n            });\r\n        }\r\n\r\n        let user = AuthenticationService.getCurrentUser();\r\n        AthleteService.getAllAthletesByCoachId(user.id).then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let notNullAthleteCode = athleteCode ? athleteCode : athletes[0].athleteCode;\r\n        AthleteService.getAthleteByAthleteCode(notNullAthleteCode).then((res) => {\r\n            let athlete = res.data;\r\n            let code = CodeGeneration.generateCode('PS', notNullAthleteCode.substring(2), true);\r\n            let psychophysiologyFactor = {\r\n                id: id,\r\n                psychophysiologyFactorCode: id ? psychophysiologyFactorCode : code,\r\n                athlete: athlete,\r\n                singleReflectionTime: singleReflectionTime,\r\n                livingCapacityQuotient: livingCapacityQuotient,\r\n                heartRateAtFiveSecondsAfterOneHundredMetersRun: heartRateAtFiveSecondsAfterOneHundredMetersRun,\r\n                restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun: restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun,\r\n                lacticAcidContentAfterOneHundredMetersRun: lacticAcidContentAfterOneHundredMetersRun,\r\n                status: status\r\n            };\r\n            \r\n            if(!id) {\r\n                PsychophysiologyFactorService.getPsychophysiologyFactorByPsychophysiologyFactorCode(code).then(res => {\r\n                    let uniquePsychophysiologyFactor = res.data;\r\n                    if (uniquePsychophysiologyFactor.psychophysiologyFactorCode === psychophysiologyFactor.psychophysiologyFactorCode) {\r\n                        if (uniquePsychophysiologyFactor.status === 1) {\r\n                            setMessage(`Vận động viên mã ${uniquePsychophysiologyFactor.athlete.athleteCode} đã được phân loại trong tháng ${uniquePsychophysiologyFactor.createAt.substring(3,10)}. Vui lòng thêm yếu tố tâm-sinh lý cho vận động viên vào tháng sau.`);\r\n                        }\r\n                        else {\r\n                            setMessage(`Yếu tố tâm-sinh lý của vận động viên mã ${uniquePsychophysiologyFactor.athlete.athleteCode} trong tháng ${uniquePsychophysiologyFactor.createAt.substring(3,10)} đã tồn tại. Vui lòng xóa yếu tố tâm-sinh lý mã ${uniquePsychophysiologyFactor.psychophysiologyFactorCode} trước khi thêm.`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        PsychophysiologyFactorService.createPsychophysiologyFactor(psychophysiologyFactor).then(\r\n                            (response) => {\r\n                                if (response.data.message === \"PsychophysiologyFactor have been added!\") {\r\n                                    setSuccess(true);\r\n                                    setMessage(\"Yếu tố tâm-sinh lý đã được thêm!\");\r\n                                }\r\n                                \r\n                                setTimeout(() => {\r\n                                    setVisible(false);\r\n                                    props.history.push('/psychophysiologyFactors');\r\n                                }, 2000);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            } \r\n            else {\r\n                PsychophysiologyFactorService.updatePsychophysiologyFactor(psychophysiologyFactor, id).then(\r\n                    (response) => {\r\n                        if (response.data.message === \"PsychophysiologyFactor have been edited!\") {\r\n                            setSuccess(true);\r\n                            setMessage(\"Yếu tố tâm-sinh lý đã được chỉnh sửa!\");\r\n                        }\r\n                        \r\n                        setTimeout(() => {\r\n                            setVisible(false);\r\n                            props.history.push('/psychophysiologyFactors');\r\n                        }, 2000);\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa yếu tố tâm-sinh lý\" : \"Thêm yếu tố tâm-sinh lý\" }</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n             {!success && (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"code\">Mã yếu tố tâm-sinh lý</Label>\r\n                            <Input type=\"text\" name=\"code\" id=\"code\" value={psychophysiologyFactorCode} readOnly={id ? true : false}/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-code\">Mã vận động viên</Label>\r\n                        <Input type={id ? \"text\" : \"select\"} name=\"athlete-code\" id=\"athlete-code\" value={athleteCode} onChange={handleChangeAthleteCode} readOnly={id ? true : false}>\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.athleteCode}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-single-reflection-time\">Thời gian phản xạ đơn (s)</Label>\r\n                        <Input type=\"text\" id=\"single-reflection-time\" name=\"criteria\" value={singleReflectionTime} onChange={handleChangeSingleReflectionTime} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-living-capacity-quotient\">Chỉ số dung tích sống (ml/kg)</Label>\r\n                        <Input type=\"text\" id=\"living-capacity-quotient\" name=\"criteria\" value={livingCapacityQuotient} onChange={handleChangeLivingCapacityQuotient} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"heart-rate-at-five-seconds-after-one-hundred-meters-run\">Tần số tim 5s sau chạy 100m (lần/ph)</Label>\r\n                        <Input type=\"text\" id=\"heart-rate-at-five-seconds-after-one-hundred-meters-run\" name=\"criteria\" value={heartRateAtFiveSecondsAfterOneHundredMetersRun} onChange={handleChangeHeartRateAtFiveSecondsAfterOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\">Tần số tim hồi phục 30s sau chạy 100m (lần/phút)</Label>\r\n                        <Input type=\"text\" id=\"restored-heart-rate-at-thirty-seconds-after-one-hundred-meters-run\" name=\"criteria\" value={restoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} onChange={handleChangeRestoredHeartRateAtThirtySecondsAfterOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"criteria-lactic-acid-content-after-one-hundred-meters-run\">Hàm lượng axit lactic sau chạy 100m (mmol/lít)</Label>\r\n                        <Input type=\"text\" id=\"lactic-acid-content-after-one-hundred-meters-run\" name=\"criteria\" value={lacticAcidContentAfterOneHundredMetersRun} onChange={handleChangeLacticAcidContentAfterOneHundredMetersRun} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"create-at\">Ngày tạo</Label>\r\n                            <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/psychophysiologyFactors\">\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n             )}\r\n             <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                {message}\r\n             </Alert>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-detail.jsx",["415","416"],"import { faArrowCircleLeft, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport TechnicalFactorService from \"../../../services/technical-factor-service\";\r\n\r\nexport default function TechnicalFactorDetail(props) {\r\n\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [athleteName, setAthleteName] = useState('');\r\n    const [technicalFactor, setTechnicalFactor] = useState({});\r\n    const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        let user = AuthenticationService.getCurrentUser();\r\n        setCurrentUser(user);\r\n\r\n        TechnicalFactorService.getTechnicalFactorById(id).then( res => {\r\n            var technicalFactor = res.data;\r\n            setTechnicalFactor(technicalFactor);\r\n            setAthleteCode(technicalFactor.athlete.athleteCode);\r\n            setAthleteName(technicalFactor.athlete.athleteName);\r\n        });\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <h2>Xem chi tiết yếu tố kỹ thuật</h2>\r\n                <dl>\r\n                    <dt>\r\n                        <span>Mã yếu tố kỹ thuật</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.technicalFactorCode}</dd>\r\n                    <dt>\r\n                        <span>Mã vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteCode}</dd>\r\n                    <dt>\r\n                        <span>Tên vận động viên</span>\r\n                    </dt>\r\n                    <dd>{athleteName}</dd>\r\n                    <dt>\r\n                        <span>Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed}</dd>\r\n                    <dt>\r\n                        <span>Thời gian tiếp đất khi đạt tốc độ cao (s)</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.groundingTimeWhenReachingHighSpeed}</dd>\r\n                    <dt>\r\n                        <span>Trạng thái</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.status === 1 ? \"Đã phân loại\" : \"Chưa phân loại\"}</dd>\r\n                    <dt>\r\n                        <span>Ngày tạo</span>\r\n                    </dt>\r\n                    <dd>{technicalFactor.createAt}</dd>\r\n                </dl>\r\n                {currentUser && currentUser.roles.includes(\"ROLE_COACH\") ? (\r\n                   <span>\r\n                      <Button color=\"primary\" tag={Link} to={`/technicalFactors/${technicalFactor.id}/edit`} >\r\n                        <FontAwesomeIcon icon={faEdit}/>\r\n                        &nbsp;\r\n                        <span>Sửa</span>\r\n                      </Button>\r\n                      &nbsp;\r\n                   </span>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <Button color=\"secondary\" tag={Link} to=\"/technicalFactors\">\r\n                    <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                    &nbsp;\r\n                    <span>Quay lại</span>\r\n                </Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\factors\\technical\\technical-update.jsx",["417"],"import React, { useEffect, useState } from \"react\";\r\nimport {Alert, Button, Container, Form, FormGroup, Input, Label} from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport TechnicalFactorService from \"../../../services/technical-factor-service\";\r\nimport AthleteService from \"../../../services/athlete-service\";\r\nimport CodeGeneration from \"../../../utils/code-generation\";\r\nimport AuthenticationService from \"../../../services/authentication-service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowCircleLeft, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function TechnicalFactorUpdate(props) {\r\n\r\n    const [athletes, setAthletes] = useState([]);\r\n    const [id, setId] = useState(props.match.params.id);\r\n    const [technicalFactorCode, setTechnicalFactorCode] = useState('');\r\n    const [athleteCode, setAthleteCode] = useState('');\r\n    const [performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed, setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed] = useState('');\r\n    const [groundingTimeWhenReachingHighSpeed, setGroundingTimeWhenReachingHighSpeed] = useState('');\r\n    const [status, setStatus] = useState(0);\r\n    const [createAt, setCreateAt] = useState('');\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const handleOpen = () => setVisible(true);\r\n    const handleToggle = () => setVisible(!visible);\r\n\r\n    const handleChangeAthleteCode = event => setAthleteCode(event.target.value);\r\n    const handleChangePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed = event => setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(event.target.value);\r\n    const handleChangeGroundingTimeWhenReachingHighSpeed = event => setGroundingTimeWhenReachingHighSpeed(event.target.value);\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        if(id)  {\r\n            TechnicalFactorService.getTechnicalFactorById(id).then( res => {\r\n                let technicalFactor = res.data;\r\n                setId(technicalFactor.id);\r\n                setTechnicalFactorCode(technicalFactor.technicalFactorCode);\r\n                setAthleteCode(technicalFactor.athlete.athleteCode);\r\n                setPerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed(technicalFactor.performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed);\r\n                setGroundingTimeWhenReachingHighSpeed(technicalFactor.groundingTimeWhenReachingHighSpeed);\r\n                setStatus(technicalFactor.status);\r\n                setCreateAt(technicalFactor.createAt);\r\n            });\r\n        }\r\n\r\n        let user = AuthenticationService.getCurrentUser();\r\n        AthleteService.getAllAthletesByCoachId(user.id).then((res) => {\r\n            setAthletes(res.data);\r\n        });\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let notNullAthleteCode = athleteCode ? athleteCode : athletes[0].athleteCode;\r\n        AthleteService.getAthleteByAthleteCode(notNullAthleteCode).then((res) => {\r\n            let athlete = res.data;\r\n            let code = CodeGeneration.generateCode('TE', notNullAthleteCode.substring(2), true);\r\n            let technicalFactor = {\r\n                id: id,\r\n                technicalFactorCode: id ? technicalFactorCode : code,\r\n                athlete: athlete,\r\n                performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed: performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed,\r\n                groundingTimeWhenReachingHighSpeed: groundingTimeWhenReachingHighSpeed,\r\n                status: status\r\n            };\r\n\r\n            if(!id) {\r\n                TechnicalFactorService.getTechnicalFactorByTechnicalFactorCode(code).then(res => {\r\n                    let uniqueTechnicalFactor = res.data;\r\n                    if (uniqueTechnicalFactor.technicalFactorCode === technicalFactor.technicalFactorCode) {\r\n                        if (uniqueTechnicalFactor.status === 1) {\r\n                            setMessage(`Vận động viên mã ${uniqueTechnicalFactor.athlete.athleteCode} đã được phân loại trong tháng ${uniqueTechnicalFactor.createAt.substring(3,10)}. Vui lòng thêm yếu tố kỹ thuật cho vận động viên vào tháng sau.`);\r\n                        }\r\n                        else {\r\n                            setMessage(`Yếu tố kỹ thuật của vận động viên mã ${uniqueTechnicalFactor.athlete.athleteCode} trong tháng ${uniqueTechnicalFactor.createAt.substring(3,10)} đã tồn tại. Vui lòng xóa yếu tố kỹ thuật mã ${uniqueTechnicalFactor.technicalFactorCode} trước khi thêm.`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        TechnicalFactorService.createTechnicalFactor(technicalFactor).then(\r\n                            (response) => {\r\n                                if (response.data.message === \"TechnicalFactor have been added!\") {\r\n                                    setSuccess(true);\r\n                                    setMessage(\"Yếu tố kỹ thuật đã được thêm!\");\r\n                                }\r\n                                \r\n                                setTimeout(() => {\r\n                                    setVisible(false);\r\n                                    props.history.push('/technicalFactors');\r\n                                }, 2000);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            } \r\n            else {\r\n                TechnicalFactorService.updateTechnicalFactor(technicalFactor, id).then(\r\n                    (response) => {\r\n                        if (response.data.message === \"TechnicalFactor have been edited!\") {\r\n                            setSuccess(true);\r\n                            setMessage(\"Yếu tố kỹ thuật đã được chỉnh sửa!\");\r\n                        }\r\n                        \r\n                        setTimeout(() => {\r\n                            setVisible(false);\r\n                            props.history.push('/technicalFactors');\r\n                        }, 2000);\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        handleOpen();\r\n    }\r\n\r\n    const title = <h2>{ id ? \"Sửa yếu tố kỹ thuật\" : \"Thêm yếu tố kỹ thuật\"}</h2>;\r\n\r\n    return(\r\n        <div>\r\n            <Container className=\"add-edit-container\">\r\n                {title}\r\n             {!success && (\r\n                <Form onSubmit={handleSubmit}>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"code\">Mã yếu tố kỹ thuật</Label>\r\n                            <Input type=\"text\" name=\"code\" id=\"code\" value={technicalFactorCode} readOnly={id ? true : false}/>\r\n                        </FormGroup>\r\n                        ) : ''}\r\n                    <FormGroup>\r\n                        <Label for=\"athlete-code\">Mã vận động viên</Label>\r\n                        <Input type={id ? \"text\" : \"select\"} name=\"athlete-code\" id=\"athlete-code\" value={athleteCode} onChange={handleChangeAthleteCode} readOnly={id ? true : false}>\r\n                            {athletes.map((athlete, i) => (\r\n                                <option>{athlete.athleteCode}</option>\r\n                            ))}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"performance-difference\">Hiệu số thành tích chạy 30m xuất phát thấp với chạy 30m tốc độ cao (s)</Label>\r\n                        <Input type=\"text\" name=\"performance-difference\" id=\"performance-difference\" value={performanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed} onChange={handleChangePerformanceDifferenceBetweenThirtyMetersRunWithLowStartAndThirtyMetersRunAtHighSpeed}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"grounding-time-when-reaching-high-speed\">Thời gian tiếp đất khi đạt tốc độ cao (s)</Label>\r\n                        <Input type=\"text\" name=\"grounding-time-when-reaching-high-speed\" id=\"grounding-time-when-reaching-high-speed\" value={groundingTimeWhenReachingHighSpeed} onChange={handleChangeGroundingTimeWhenReachingHighSpeed} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"status\">Trạng thái</Label>\r\n                        <Input type=\"text\" name=\"status\" id=\"status\" value={status === '1' ? \"Đã phân loại\" : \"Chưa phân loại\"} readOnly/>\r\n                    </FormGroup>\r\n                    {id ? (\r\n                        <FormGroup>\r\n                            <Label for=\"create-at\">Ngày tạo</Label>\r\n                            <Input type=\"text\" name=\"create-at\" id=\"create-at\" value={createAt} readOnly/>\r\n                        </FormGroup>\r\n                    ) : ''}\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                            &nbsp;\r\n                            <span>Lưu</span>\r\n                        </Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/technicalFactors\">\r\n                            <FontAwesomeIcon icon={faArrowCircleLeft}/>\r\n                            &nbsp;\r\n                            <span>Quay lại</span>\r\n                        </Button>\r\n                    </FormGroup>\r\n                </Form>\r\n             )}\r\n             <Alert color={success ? \"success\" : \"danger\"} isOpen={visible} toggle={handleToggle}>\r\n                {message}\r\n             </Alert>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\routes\\routes.jsx",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\authentication-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\pages\\user-management\\user.jsx",["418","419"],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\psychophysiology-factor-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\athlete-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\form-factor-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\athlete-classification-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\technical-factor-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\user-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\services\\physical-factor-service.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\code-generation.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\athlete-classification-function.js",[],"F:\\Java Project\\training-level-assessment\\src\\main\\resources\\webapp\\app\\src\\utils\\now-date-time.js",[],{"ruleId":"420","severity":1,"message":"421","line":9,"column":10,"nodeType":"422","messageId":"423","endLine":9,"endColumn":18},{"ruleId":"420","severity":1,"message":"424","line":10,"column":10,"nodeType":"422","messageId":"423","endLine":10,"endColumn":21},{"ruleId":"420","severity":1,"message":"425","line":11,"column":8,"nodeType":"422","messageId":"423","endLine":11,"endColumn":14},{"ruleId":"420","severity":1,"message":"426","line":12,"column":8,"nodeType":"422","messageId":"423","endLine":12,"endColumn":14},{"ruleId":"427","replacedBy":"428"},{"ruleId":"429","replacedBy":"430"},{"ruleId":"420","severity":1,"message":"431","line":6,"column":10,"nodeType":"422","messageId":"423","endLine":6,"endColumn":17},{"ruleId":"427","replacedBy":"432"},{"ruleId":"429","replacedBy":"433"},{"ruleId":"420","severity":1,"message":"434","line":3,"column":18,"nodeType":"422","messageId":"423","endLine":3,"endColumn":27},{"ruleId":"420","severity":1,"message":"435","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"420","severity":1,"message":"435","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"420","severity":1,"message":"435","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"420","severity":1,"message":"435","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"420","severity":1,"message":"435","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"420","severity":1,"message":"436","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":13},{"ruleId":"420","severity":1,"message":"437","line":2,"column":82,"nodeType":"422","messageId":"423","endLine":2,"endColumn":93},{"ruleId":"420","severity":1,"message":"438","line":2,"column":128,"nodeType":"422","messageId":"423","endLine":2,"endColumn":131},{"ruleId":"420","severity":1,"message":"439","line":2,"column":133,"nodeType":"422","messageId":"423","endLine":2,"endColumn":159},{"ruleId":"420","severity":1,"message":"440","line":3,"column":21,"nodeType":"422","messageId":"423","endLine":3,"endColumn":25},{"ruleId":"420","severity":1,"message":"441","line":4,"column":16,"nodeType":"422","messageId":"423","endLine":4,"endColumn":20},{"ruleId":"420","severity":1,"message":"436","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":13},{"ruleId":"420","severity":1,"message":"442","line":2,"column":28,"nodeType":"422","messageId":"423","endLine":2,"endColumn":35},{"ruleId":"420","severity":1,"message":"443","line":2,"column":37,"nodeType":"422","messageId":"423","endLine":2,"endColumn":44},{"ruleId":"420","severity":1,"message":"438","line":2,"column":46,"nodeType":"422","messageId":"423","endLine":2,"endColumn":49},{"ruleId":"420","severity":1,"message":"440","line":3,"column":21,"nodeType":"422","messageId":"423","endLine":3,"endColumn":25},{"ruleId":"420","severity":1,"message":"421","line":10,"column":10,"nodeType":"422","messageId":"423","endLine":10,"endColumn":18},{"ruleId":"420","severity":1,"message":"424","line":11,"column":10,"nodeType":"422","messageId":"423","endLine":11,"endColumn":21},{"ruleId":"427","replacedBy":"444"},{"ruleId":"429","replacedBy":"445"},{"ruleId":"420","severity":1,"message":"446","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":15},{"ruleId":"420","severity":1,"message":"447","line":2,"column":17,"nodeType":"422","messageId":"423","endLine":2,"endColumn":23},{"ruleId":"420","severity":1,"message":"438","line":2,"column":110,"nodeType":"422","messageId":"423","endLine":2,"endColumn":113},{"ruleId":"420","severity":1,"message":"439","line":2,"column":115,"nodeType":"422","messageId":"423","endLine":2,"endColumn":141},{"ruleId":"420","severity":1,"message":"440","line":3,"column":21,"nodeType":"422","messageId":"423","endLine":3,"endColumn":25},{"ruleId":"420","severity":1,"message":"441","line":4,"column":16,"nodeType":"422","messageId":"423","endLine":4,"endColumn":20},{"ruleId":"420","severity":1,"message":"448","line":8,"column":10,"nodeType":"422","messageId":"423","endLine":8,"endColumn":20},{"ruleId":"420","severity":1,"message":"449","line":8,"column":36,"nodeType":"422","messageId":"423","endLine":8,"endColumn":46},{"ruleId":"420","severity":1,"message":"450","line":8,"column":69,"nodeType":"422","messageId":"423","endLine":8,"endColumn":75},{"ruleId":"420","severity":1,"message":"451","line":8,"column":85,"nodeType":"422","messageId":"423","endLine":8,"endColumn":97},{"ruleId":"420","severity":1,"message":"452","line":8,"column":137,"nodeType":"422","messageId":"423","endLine":8,"endColumn":144},{"ruleId":"420","severity":1,"message":"453","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":20},{"ruleId":"420","severity":1,"message":"443","line":2,"column":34,"nodeType":"422","messageId":"423","endLine":2,"endColumn":41},{"ruleId":"420","severity":1,"message":"438","line":2,"column":43,"nodeType":"422","messageId":"423","endLine":2,"endColumn":46},{"ruleId":"420","severity":1,"message":"440","line":3,"column":21,"nodeType":"422","messageId":"423","endLine":3,"endColumn":25},{"ruleId":"420","severity":1,"message":"454","line":2,"column":53,"nodeType":"422","messageId":"423","endLine":2,"endColumn":62},{"ruleId":"420","severity":1,"message":"455","line":19,"column":22,"nodeType":"422","messageId":"423","endLine":19,"endColumn":33},{"ruleId":"456","severity":1,"message":"457","line":95,"column":7,"nodeType":"458","endLine":95,"endColumn":59,"suggestions":"459"},{"ruleId":"420","severity":1,"message":"460","line":14,"column":23,"nodeType":"422","messageId":"423","endLine":14,"endColumn":35},{"ruleId":"456","severity":1,"message":"461","line":26,"column":7,"nodeType":"458","endLine":26,"endColumn":9,"suggestions":"462"},{"ruleId":"420","severity":1,"message":"460","line":17,"column":21,"nodeType":"422","messageId":"423","endLine":17,"endColumn":33},{"ruleId":"420","severity":1,"message":"463","line":18,"column":10,"nodeType":"422","messageId":"423","endLine":18,"endColumn":17},{"ruleId":"456","severity":1,"message":"461","line":72,"column":6,"nodeType":"458","endLine":72,"endColumn":8,"suggestions":"464"},{"ruleId":"456","severity":1,"message":"457","line":110,"column":7,"nodeType":"458","endLine":110,"endColumn":9,"suggestions":"465"},{"ruleId":"456","severity":1,"message":"457","line":138,"column":7,"nodeType":"458","endLine":138,"endColumn":9,"suggestions":"466"},{"ruleId":"456","severity":1,"message":"461","line":62,"column":7,"nodeType":"458","endLine":62,"endColumn":9,"suggestions":"467"},{"ruleId":"456","severity":1,"message":"457","line":93,"column":7,"nodeType":"458","endLine":93,"endColumn":9,"suggestions":"468"},{"ruleId":"456","severity":1,"message":"457","line":98,"column":7,"nodeType":"458","endLine":98,"endColumn":9,"suggestions":"469"},{"ruleId":"420","severity":1,"message":"470","line":8,"column":28,"nodeType":"422","messageId":"423","endLine":8,"endColumn":35},{"ruleId":"420","severity":1,"message":"471","line":9,"column":10,"nodeType":"422","messageId":"423","endLine":9,"endColumn":19},{"ruleId":"420","severity":1,"message":"472","line":8,"column":3,"nodeType":"422","messageId":"423","endLine":8,"endColumn":9},{"ruleId":"420","severity":1,"message":"473","line":10,"column":3,"nodeType":"422","messageId":"423","endLine":10,"endColumn":13},{"ruleId":"420","severity":1,"message":"474","line":11,"column":3,"nodeType":"422","messageId":"423","endLine":11,"endColumn":18},{"ruleId":"420","severity":1,"message":"475","line":12,"column":3,"nodeType":"422","messageId":"423","endLine":12,"endColumn":17},{"ruleId":"420","severity":1,"message":"476","line":14,"column":3,"nodeType":"422","messageId":"423","endLine":14,"endColumn":8},{"ruleId":"420","severity":1,"message":"477","line":15,"column":3,"nodeType":"422","messageId":"423","endLine":15,"endColumn":12},{"ruleId":"420","severity":1,"message":"478","line":16,"column":3,"nodeType":"422","messageId":"423","endLine":16,"endColumn":14},{"ruleId":"420","severity":1,"message":"479","line":17,"column":3,"nodeType":"422","messageId":"423","endLine":17,"endColumn":14},{"ruleId":"420","severity":1,"message":"455","line":18,"column":20,"nodeType":"422","messageId":"423","endLine":18,"endColumn":31},{"ruleId":"456","severity":1,"message":"457","line":105,"column":6,"nodeType":"458","endLine":105,"endColumn":42,"suggestions":"480"},{"ruleId":"456","severity":1,"message":"481","line":69,"column":7,"nodeType":"458","endLine":69,"endColumn":9,"suggestions":"482"},{"ruleId":"420","severity":1,"message":"483","line":16,"column":14,"nodeType":"422","messageId":"423","endLine":16,"endColumn":19},{"ruleId":"456","severity":1,"message":"484","line":58,"column":6,"nodeType":"458","endLine":58,"endColumn":8,"suggestions":"485"},{"ruleId":"420","severity":1,"message":"483","line":16,"column":14,"nodeType":"422","messageId":"423","endLine":16,"endColumn":19},{"ruleId":"456","severity":1,"message":"484","line":57,"column":6,"nodeType":"458","endLine":57,"endColumn":8,"suggestions":"486"},{"ruleId":"420","severity":1,"message":"483","line":11,"column":16,"nodeType":"422","messageId":"423","endLine":11,"endColumn":21},{"ruleId":"456","severity":1,"message":"484","line":27,"column":7,"nodeType":"458","endLine":27,"endColumn":9,"suggestions":"487"},{"ruleId":"420","severity":1,"message":"455","line":17,"column":22,"nodeType":"422","messageId":"423","endLine":17,"endColumn":33},{"ruleId":"456","severity":1,"message":"457","line":103,"column":8,"nodeType":"458","endLine":103,"endColumn":48,"suggestions":"488"},{"ruleId":"420","severity":1,"message":"483","line":16,"column":14,"nodeType":"422","messageId":"423","endLine":16,"endColumn":19},{"ruleId":"456","severity":1,"message":"484","line":61,"column":6,"nodeType":"458","endLine":61,"endColumn":8,"suggestions":"489"},{"ruleId":"420","severity":1,"message":"490","line":21,"column":10,"nodeType":"422","messageId":"423","endLine":21,"endColumn":21},{"ruleId":"456","severity":1,"message":"457","line":70,"column":6,"nodeType":"458","endLine":70,"endColumn":8,"suggestions":"491"},{"ruleId":"420","severity":1,"message":"483","line":11,"column":16,"nodeType":"422","messageId":"423","endLine":11,"endColumn":21},{"ruleId":"456","severity":1,"message":"484","line":27,"column":7,"nodeType":"458","endLine":27,"endColumn":9,"suggestions":"492"},{"ruleId":"420","severity":1,"message":"483","line":11,"column":16,"nodeType":"422","messageId":"423","endLine":11,"endColumn":21},{"ruleId":"456","severity":1,"message":"484","line":27,"column":7,"nodeType":"458","endLine":27,"endColumn":9,"suggestions":"493"},{"ruleId":"456","severity":1,"message":"484","line":81,"column":7,"nodeType":"458","endLine":81,"endColumn":9,"suggestions":"494"},{"ruleId":"420","severity":1,"message":"495","line":2,"column":8,"nodeType":"422","messageId":"423","endLine":2,"endColumn":14},{"ruleId":"420","severity":1,"message":"436","line":5,"column":16,"nodeType":"422","messageId":"423","endLine":5,"endColumn":19},{"ruleId":"420","severity":1,"message":"455","line":20,"column":20,"nodeType":"422","messageId":"423","endLine":20,"endColumn":31},{"ruleId":"456","severity":1,"message":"496","line":84,"column":5,"nodeType":"458","endLine":84,"endColumn":32,"suggestions":"497"},{"ruleId":"456","severity":1,"message":"498","line":112,"column":5,"nodeType":"458","endLine":112,"endColumn":7,"suggestions":"499"},{"ruleId":"420","severity":1,"message":"483","line":16,"column":14,"nodeType":"422","messageId":"423","endLine":16,"endColumn":19},{"ruleId":"420","severity":1,"message":"500","line":17,"column":10,"nodeType":"422","messageId":"423","endLine":17,"endColumn":14},{"ruleId":"456","severity":1,"message":"484","line":50,"column":6,"nodeType":"458","endLine":50,"endColumn":8,"suggestions":"501"},{"ruleId":"456","severity":1,"message":"481","line":95,"column":7,"nodeType":"458","endLine":95,"endColumn":9,"suggestions":"502"},{"ruleId":"420","severity":1,"message":"503","line":11,"column":20,"nodeType":"422","messageId":"423","endLine":11,"endColumn":29},{"ruleId":"456","severity":1,"message":"481","line":23,"column":7,"nodeType":"458","endLine":23,"endColumn":9,"suggestions":"504"},{"ruleId":"420","severity":1,"message":"455","line":17,"column":20,"nodeType":"422","messageId":"423","endLine":17,"endColumn":31},{"ruleId":"456","severity":1,"message":"457","line":103,"column":6,"nodeType":"458","endLine":103,"endColumn":47,"suggestions":"505"},{"ruleId":"420","severity":1,"message":"455","line":17,"column":20,"nodeType":"422","messageId":"423","endLine":17,"endColumn":31},{"ruleId":"456","severity":1,"message":"457","line":103,"column":8,"nodeType":"458","endLine":103,"endColumn":56,"suggestions":"506"},{"ruleId":"420","severity":1,"message":"483","line":16,"column":14,"nodeType":"422","messageId":"423","endLine":16,"endColumn":19},{"ruleId":"456","severity":1,"message":"484","line":57,"column":6,"nodeType":"458","endLine":57,"endColumn":8,"suggestions":"507"},{"ruleId":"456","severity":1,"message":"484","line":60,"column":7,"nodeType":"458","endLine":60,"endColumn":9,"suggestions":"508"},{"ruleId":"420","severity":1,"message":"483","line":11,"column":16,"nodeType":"422","messageId":"423","endLine":11,"endColumn":21},{"ruleId":"456","severity":1,"message":"484","line":27,"column":7,"nodeType":"458","endLine":27,"endColumn":9,"suggestions":"509"},{"ruleId":"456","severity":1,"message":"484","line":53,"column":7,"nodeType":"458","endLine":53,"endColumn":9,"suggestions":"510"},{"ruleId":"420","severity":1,"message":"455","line":17,"column":20,"nodeType":"422","messageId":"423","endLine":17,"endColumn":31},{"ruleId":"456","severity":1,"message":"457","line":65,"column":6,"nodeType":"458","endLine":65,"endColumn":22,"suggestions":"511"},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","'Header' is defined but never used.","'Footer' is defined but never used.","no-native-reassign",["512"],"no-negated-in-lhs",["513"],"'connect' is defined but never used.",["512"],["513"],"'Container' is defined but never used.","'render' is defined but never used.","'Col' is defined but never used.","'NavbarBrand' is defined but never used.","'Row' is defined but never used.","'UncontrolledButtonDropdown' is defined but never used.","'Link' is defined but never used.","'Home' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.",["512"],["513"],"'Route' is defined but never used.","'Switch' is defined but never used.","'faAsterisk' is defined but never used.","'faChartBar' is defined but never used.","'faList' is defined but never used.","'faRegistered' is defined but never used.","'faTasks' is defined but never used.","'CardFooter' is defined but never used.","'FormGroup' is defined but never used.","'setPageSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["514"],"'setAthleteId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'athleteId'. Either include it or remove the dependency array.",["515"],"'athlete' is assigned a value but never used.",["516"],["517"],["518"],["519"],["520"],["521"],"'Spinner' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'InputGroupText' is defined but never used.","'Modal' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'ModalHeader' is defined but never used.",["522"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["523"],"'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["524"],["525"],["526"],["527"],["528"],"'currentUser' is assigned a value but never used.",["529"],["530"],["531"],["532"],"'moment' is defined but never used.","React Hook useEffect has missing dependencies: 'handleOption', 'month', and 'year'. Either include them or remove the dependency array.",["533"],"React Hook useEffect has missing dependencies: 'handleOption' and 'props.history'. Either include them or remove the dependency array.",["534"],"'user' is assigned a value but never used.",["535"],["536"],"'setUserId' is assigned a value but never used.",["537"],["538"],["539"],["540"],["541"],["542"],["543"],["544"],"no-global-assign","no-unsafe-negation",{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"547","fix":"549"},{"desc":"550","fix":"551"},{"desc":"550","fix":"552"},{"desc":"547","fix":"553"},{"desc":"550","fix":"554"},{"desc":"550","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"560","fix":"562"},{"desc":"560","fix":"563"},{"desc":"564","fix":"565"},{"desc":"560","fix":"566"},{"desc":"550","fix":"567"},{"desc":"560","fix":"568"},{"desc":"560","fix":"569"},{"desc":"560","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"560","fix":"575"},{"desc":"558","fix":"576"},{"desc":"558","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"560","fix":"582"},{"desc":"560","fix":"583"},{"desc":"560","fix":"584"},{"desc":"560","fix":"585"},{"desc":"586","fix":"587"},"Update the dependencies array to be: [searchAthleteName, page, pageSize, athletes.length, props.history]",{"range":"588","text":"589"},"Update the dependencies array to be: [athleteId]",{"range":"590","text":"591"},{"range":"592","text":"591"},"Update the dependencies array to be: [props.history]",{"range":"593","text":"594"},{"range":"595","text":"594"},{"range":"596","text":"591"},{"range":"597","text":"594"},{"range":"598","text":"594"},"Update the dependencies array to be: [page, pageSize, formFactors.length, props.history]",{"range":"599","text":"600"},"Update the dependencies array to be: [userId]",{"range":"601","text":"602"},"Update the dependencies array to be: [id]",{"range":"603","text":"604"},{"range":"605","text":"604"},{"range":"606","text":"604"},"Update the dependencies array to be: [page, pageSize, physicalFactors.length, props.history]",{"range":"607","text":"608"},{"range":"609","text":"604"},{"range":"610","text":"594"},{"range":"611","text":"604"},{"range":"612","text":"604"},{"range":"613","text":"604"},"Update the dependencies array to be: [page, pageSize, monthYear, handleOption, month, year]",{"range":"614","text":"615"},"Update the dependencies array to be: [handleOption, props.history]",{"range":"616","text":"617"},{"range":"618","text":"604"},{"range":"619","text":"602"},{"range":"620","text":"602"},"Update the dependencies array to be: [page, pageSize, props.history, technicalFactors.length]",{"range":"621","text":"622"},"Update the dependencies array to be: [page, pageSize, props.history, psychophysiologyFactors.length]",{"range":"623","text":"624"},{"range":"625","text":"604"},{"range":"626","text":"604"},{"range":"627","text":"604"},{"range":"628","text":"604"},"Update the dependencies array to be: [page, pageSize, props.history]",{"range":"629","text":"630"},[3346,3398],"[searchAthleteName, page, pageSize, athletes.length, props.history]",[914,916],"[athleteId]",[2153,2155],[5992,5994],"[props.history]",[7950,7952],[2948,2950],[4095,4097],[5017,5019],[3218,3254],"[page, pageSize, formFactors.length, props.history]",[3092,3094],"[userId]",[1701,1703],"[id]",[1647,1649],[1191,1193],[3368,3408],"[page, pageSize, physicalFactors.length, props.history]",[1875,1877],[3067,3069],[1326,1328],[1239,1241],[5544,5546],[2760,2787],"[page, pageSize, monthYear, handleOption, month, year]",[4052,4054],"[handleOption, props.history]",[1346,1348],[3820,3822],[883,885],[3289,3330],"[page, pageSize, props.history, technicalFactors.length]",[3474,3522],"[page, pageSize, props.history, psychophysiologyFactors.length]",[1715,1717],[3968,3970],[1251,1253],[3033,3035],[1901,1917],"[page, pageSize, props.history]"]